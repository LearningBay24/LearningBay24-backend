// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserHasExam is an object representing the database table.
type UserHasExam struct {
	UserID int `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ExamID int `boil:"exam_id" json:"exam_id" toml:"exam_id" yaml:"exam_id"`
	// Whether the user has attended the exam or not.
	Attended int8     `boil:"attended" json:"attended" toml:"attended" yaml:"attended"`
	Grade    null.Int `boil:"grade" json:"grade,omitempty" toml:"grade" yaml:"grade,omitempty"`
	// If the user that attended the exam passed it or not.
	Passed null.Int8 `boil:"passed" json:"passed,omitempty" toml:"passed" yaml:"passed,omitempty"`
	// The feedback given to the user about their solution to the exam.
	Feedback null.String `boil:"feedback" json:"feedback,omitempty" toml:"feedback" yaml:"feedback,omitempty"`
	// When the user registered for the exam.
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	// When the user deregistered from the exam.
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *userHasExamR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userHasExamL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserHasExamColumns = struct {
	UserID    string
	ExamID    string
	Attended  string
	Grade     string
	Passed    string
	Feedback  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	UserID:    "user_id",
	ExamID:    "exam_id",
	Attended:  "attended",
	Grade:     "grade",
	Passed:    "passed",
	Feedback:  "feedback",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var UserHasExamTableColumns = struct {
	UserID    string
	ExamID    string
	Attended  string
	Grade     string
	Passed    string
	Feedback  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	UserID:    "user_has_exam.user_id",
	ExamID:    "user_has_exam.exam_id",
	Attended:  "user_has_exam.attended",
	Grade:     "user_has_exam.grade",
	Passed:    "user_has_exam.passed",
	Feedback:  "user_has_exam.feedback",
	CreatedAt: "user_has_exam.created_at",
	UpdatedAt: "user_has_exam.updated_at",
	DeletedAt: "user_has_exam.deleted_at",
}

// Generated where

type whereHelpernull_Int8 struct{ field string }

func (w whereHelpernull_Int8) EQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int8) NEQ(x null.Int8) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int8) LT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int8) LTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int8) GT(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int8) GTE(x null.Int8) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int8) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int8) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UserHasExamWhere = struct {
	UserID    whereHelperint
	ExamID    whereHelperint
	Attended  whereHelperint8
	Grade     whereHelpernull_Int
	Passed    whereHelpernull_Int8
	Feedback  whereHelpernull_String
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	UserID:    whereHelperint{field: "`user_has_exam`.`user_id`"},
	ExamID:    whereHelperint{field: "`user_has_exam`.`exam_id`"},
	Attended:  whereHelperint8{field: "`user_has_exam`.`attended`"},
	Grade:     whereHelpernull_Int{field: "`user_has_exam`.`grade`"},
	Passed:    whereHelpernull_Int8{field: "`user_has_exam`.`passed`"},
	Feedback:  whereHelpernull_String{field: "`user_has_exam`.`feedback`"},
	CreatedAt: whereHelpertime_Time{field: "`user_has_exam`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`user_has_exam`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`user_has_exam`.`deleted_at`"},
}

// UserHasExamRels is where relationship names are stored.
var UserHasExamRels = struct {
	Exam string
	User string
}{
	Exam: "Exam",
	User: "User",
}

// userHasExamR is where relationships are stored.
type userHasExamR struct {
	Exam *Exam `boil:"Exam" json:"Exam" toml:"Exam" yaml:"Exam"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userHasExamR) NewStruct() *userHasExamR {
	return &userHasExamR{}
}

func (r *userHasExamR) GetExam() *Exam {
	if r == nil {
		return nil
	}
	return r.Exam
}

func (r *userHasExamR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userHasExamL is where Load methods for each relationship are stored.
type userHasExamL struct{}

var (
	userHasExamAllColumns            = []string{"user_id", "exam_id", "attended", "grade", "passed", "feedback", "created_at", "updated_at", "deleted_at"}
	userHasExamColumnsWithoutDefault = []string{"user_id", "exam_id", "grade", "passed", "feedback", "updated_at", "deleted_at"}
	userHasExamColumnsWithDefault    = []string{"attended", "created_at"}
	userHasExamPrimaryKeyColumns     = []string{"user_id", "exam_id"}
	userHasExamGeneratedColumns      = []string{}
)

type (
	// UserHasExamSlice is an alias for a slice of pointers to UserHasExam.
	// This should almost always be used instead of []UserHasExam.
	UserHasExamSlice []*UserHasExam
	// UserHasExamHook is the signature for custom UserHasExam hook methods
	UserHasExamHook func(context.Context, boil.ContextExecutor, *UserHasExam) error

	userHasExamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userHasExamType                 = reflect.TypeOf(&UserHasExam{})
	userHasExamMapping              = queries.MakeStructMapping(userHasExamType)
	userHasExamPrimaryKeyMapping, _ = queries.BindMapping(userHasExamType, userHasExamMapping, userHasExamPrimaryKeyColumns)
	userHasExamInsertCacheMut       sync.RWMutex
	userHasExamInsertCache          = make(map[string]insertCache)
	userHasExamUpdateCacheMut       sync.RWMutex
	userHasExamUpdateCache          = make(map[string]updateCache)
	userHasExamUpsertCacheMut       sync.RWMutex
	userHasExamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userHasExamAfterSelectHooks []UserHasExamHook

var userHasExamBeforeInsertHooks []UserHasExamHook
var userHasExamAfterInsertHooks []UserHasExamHook

var userHasExamBeforeUpdateHooks []UserHasExamHook
var userHasExamAfterUpdateHooks []UserHasExamHook

var userHasExamBeforeDeleteHooks []UserHasExamHook
var userHasExamAfterDeleteHooks []UserHasExamHook

var userHasExamBeforeUpsertHooks []UserHasExamHook
var userHasExamAfterUpsertHooks []UserHasExamHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserHasExam) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasExamAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserHasExam) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasExamBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserHasExam) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasExamAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserHasExam) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasExamBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserHasExam) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasExamAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserHasExam) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasExamBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserHasExam) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasExamAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserHasExam) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasExamBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserHasExam) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasExamAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserHasExamHook registers your hook function for all future operations.
func AddUserHasExamHook(hookPoint boil.HookPoint, userHasExamHook UserHasExamHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userHasExamAfterSelectHooks = append(userHasExamAfterSelectHooks, userHasExamHook)
	case boil.BeforeInsertHook:
		userHasExamBeforeInsertHooks = append(userHasExamBeforeInsertHooks, userHasExamHook)
	case boil.AfterInsertHook:
		userHasExamAfterInsertHooks = append(userHasExamAfterInsertHooks, userHasExamHook)
	case boil.BeforeUpdateHook:
		userHasExamBeforeUpdateHooks = append(userHasExamBeforeUpdateHooks, userHasExamHook)
	case boil.AfterUpdateHook:
		userHasExamAfterUpdateHooks = append(userHasExamAfterUpdateHooks, userHasExamHook)
	case boil.BeforeDeleteHook:
		userHasExamBeforeDeleteHooks = append(userHasExamBeforeDeleteHooks, userHasExamHook)
	case boil.AfterDeleteHook:
		userHasExamAfterDeleteHooks = append(userHasExamAfterDeleteHooks, userHasExamHook)
	case boil.BeforeUpsertHook:
		userHasExamBeforeUpsertHooks = append(userHasExamBeforeUpsertHooks, userHasExamHook)
	case boil.AfterUpsertHook:
		userHasExamAfterUpsertHooks = append(userHasExamAfterUpsertHooks, userHasExamHook)
	}
}

// One returns a single userHasExam record from the query.
func (q userHasExamQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserHasExam, error) {
	o := &UserHasExam{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_has_exam")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserHasExam records from the query.
func (q userHasExamQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserHasExamSlice, error) {
	var o []*UserHasExam

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserHasExam slice")
	}

	if len(userHasExamAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserHasExam records in the query.
func (q userHasExamQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_has_exam rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userHasExamQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_has_exam exists")
	}

	return count > 0, nil
}

// Exam pointed to by the foreign key.
func (o *UserHasExam) Exam(mods ...qm.QueryMod) examQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ExamID),
	}

	queryMods = append(queryMods, mods...)

	return Exams(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserHasExam) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadExam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userHasExamL) LoadExam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserHasExam interface{}, mods queries.Applicator) error {
	var slice []*UserHasExam
	var object *UserHasExam

	if singular {
		object = maybeUserHasExam.(*UserHasExam)
	} else {
		slice = *maybeUserHasExam.(*[]*UserHasExam)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userHasExamR{}
		}
		args = append(args, object.ExamID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userHasExamR{}
			}

			for _, a := range args {
				if a == obj.ExamID {
					continue Outer
				}
			}

			args = append(args, obj.ExamID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`exam`),
		qm.WhereIn(`exam.id in ?`, args...),
		qmhelper.WhereIsNull(`exam.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Exam")
	}

	var resultSlice []*Exam
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Exam")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exam")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exam")
	}

	if len(userHasExamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Exam = foreign
		if foreign.R == nil {
			foreign.R = &examR{}
		}
		foreign.R.UserHasExams = append(foreign.R.UserHasExams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExamID == foreign.ID {
				local.R.Exam = foreign
				if foreign.R == nil {
					foreign.R = &examR{}
				}
				foreign.R.UserHasExams = append(foreign.R.UserHasExams, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userHasExamL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserHasExam interface{}, mods queries.Applicator) error {
	var slice []*UserHasExam
	var object *UserHasExam

	if singular {
		object = maybeUserHasExam.(*UserHasExam)
	} else {
		slice = *maybeUserHasExam.(*[]*UserHasExam)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userHasExamR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userHasExamR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userHasExamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserHasExams = append(foreign.R.UserHasExams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserHasExams = append(foreign.R.UserHasExams, local)
				break
			}
		}
	}

	return nil
}

// SetExam of the userHasExam to the related item.
// Sets o.R.Exam to related.
// Adds o to related.R.UserHasExams.
func (o *UserHasExam) SetExam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Exam) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_has_exam` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"exam_id"}),
		strmangle.WhereClause("`", "`", 0, userHasExamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.ExamID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExamID = related.ID
	if o.R == nil {
		o.R = &userHasExamR{
			Exam: related,
		}
	} else {
		o.R.Exam = related
	}

	if related.R == nil {
		related.R = &examR{
			UserHasExams: UserHasExamSlice{o},
		}
	} else {
		related.R.UserHasExams = append(related.R.UserHasExams, o)
	}

	return nil
}

// SetUser of the userHasExam to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserHasExams.
func (o *UserHasExam) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_has_exam` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userHasExamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.ExamID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userHasExamR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserHasExams: UserHasExamSlice{o},
		}
	} else {
		related.R.UserHasExams = append(related.R.UserHasExams, o)
	}

	return nil
}

// UserHasExams retrieves all the records using an executor.
func UserHasExams(mods ...qm.QueryMod) userHasExamQuery {
	mods = append(mods, qm.From("`user_has_exam`"), qmhelper.WhereIsNull("`user_has_exam`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_has_exam`.*"})
	}

	return userHasExamQuery{q}
}

// FindUserHasExam retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserHasExam(ctx context.Context, exec boil.ContextExecutor, userID int, examID int, selectCols ...string) (*UserHasExam, error) {
	userHasExamObj := &UserHasExam{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_has_exam` where `user_id`=? AND `exam_id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, userID, examID)

	err := q.Bind(ctx, exec, userHasExamObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_has_exam")
	}

	if err = userHasExamObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userHasExamObj, err
	}

	return userHasExamObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserHasExam) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_has_exam provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userHasExamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userHasExamInsertCacheMut.RLock()
	cache, cached := userHasExamInsertCache[key]
	userHasExamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userHasExamAllColumns,
			userHasExamColumnsWithDefault,
			userHasExamColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userHasExamType, userHasExamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userHasExamType, userHasExamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_has_exam` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_has_exam` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_has_exam` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userHasExamPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_has_exam")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
		o.ExamID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_has_exam")
	}

CacheNoHooks:
	if !cached {
		userHasExamInsertCacheMut.Lock()
		userHasExamInsertCache[key] = cache
		userHasExamInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserHasExam.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserHasExam) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userHasExamUpdateCacheMut.RLock()
	cache, cached := userHasExamUpdateCache[key]
	userHasExamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userHasExamAllColumns,
			userHasExamPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_has_exam, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_has_exam` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userHasExamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userHasExamType, userHasExamMapping, append(wl, userHasExamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_has_exam row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_has_exam")
	}

	if !cached {
		userHasExamUpdateCacheMut.Lock()
		userHasExamUpdateCache[key] = cache
		userHasExamUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userHasExamQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_has_exam")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_has_exam")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserHasExamSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userHasExamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_has_exam` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userHasExamPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userHasExam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userHasExam")
	}
	return rowsAff, nil
}

var mySQLUserHasExamUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserHasExam) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_has_exam provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userHasExamColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserHasExamUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userHasExamUpsertCacheMut.RLock()
	cache, cached := userHasExamUpsertCache[key]
	userHasExamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userHasExamAllColumns,
			userHasExamColumnsWithDefault,
			userHasExamColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userHasExamAllColumns,
			userHasExamPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_has_exam, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_has_exam`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_has_exam` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userHasExamType, userHasExamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userHasExamType, userHasExamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_has_exam")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userHasExamType, userHasExamMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_has_exam")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_has_exam")
	}

CacheNoHooks:
	if !cached {
		userHasExamUpsertCacheMut.Lock()
		userHasExamUpsertCache[key] = cache
		userHasExamUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserHasExam record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserHasExam) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserHasExam provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userHasExamPrimaryKeyMapping)
		sql = "DELETE FROM `user_has_exam` WHERE `user_id`=? AND `exam_id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_has_exam` SET %s WHERE `user_id`=? AND `exam_id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(userHasExamType, userHasExamMapping, append(wl, userHasExamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_has_exam")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_has_exam")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userHasExamQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userHasExamQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_has_exam")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_has_exam")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserHasExamSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userHasExamBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userHasExamPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `user_has_exam` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userHasExamPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userHasExamPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_has_exam` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userHasExamPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userHasExam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_has_exam")
	}

	if len(userHasExamAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserHasExam) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserHasExam(ctx, exec, o.UserID, o.ExamID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserHasExamSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserHasExamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userHasExamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_has_exam`.* FROM `user_has_exam` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userHasExamPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserHasExamSlice")
	}

	*o = slice

	return nil
}

// UserHasExamExists checks if the UserHasExam row exists.
func UserHasExamExists(ctx context.Context, exec boil.ContextExecutor, userID int, examID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_has_exam` where `user_id`=? AND `exam_id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, examID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, examID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_has_exam exists")
	}

	return exists, nil
}

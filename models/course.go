// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Course is an object representing the database table.
type Course struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// The detailed description of this course.
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	EnrollKey   string      `boil:"enroll_key" json:"enroll_key" toml:"enroll_key" yaml:"enroll_key"`
	ForumID     int         `boil:"forum_id" json:"forum_id" toml:"forum_id" yaml:"forum_id"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *courseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L courseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CourseColumns = struct {
	ID          string
	Name        string
	Description string
	EnrollKey   string
	ForumID     string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
	EnrollKey:   "enroll_key",
	ForumID:     "forum_id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var CourseTableColumns = struct {
	ID          string
	Name        string
	Description string
	EnrollKey   string
	ForumID     string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "course.id",
	Name:        "course.name",
	Description: "course.description",
	EnrollKey:   "course.enroll_key",
	ForumID:     "course.forum_id",
	CreatedAt:   "course.created_at",
	UpdatedAt:   "course.updated_at",
	DeletedAt:   "course.deleted_at",
}

// Generated where

var CourseWhere = struct {
	ID          whereHelperint
	Name        whereHelperstring
	Description whereHelpernull_String
	EnrollKey   whereHelperstring
	ForumID     whereHelperint
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "`course`.`id`"},
	Name:        whereHelperstring{field: "`course`.`name`"},
	Description: whereHelpernull_String{field: "`course`.`description`"},
	EnrollKey:   whereHelperstring{field: "`course`.`enroll_key`"},
	ForumID:     whereHelperint{field: "`course`.`forum_id`"},
	CreatedAt:   whereHelpernull_Time{field: "`course`.`created_at`"},
	UpdatedAt:   whereHelpernull_Time{field: "`course`.`updated_at`"},
	DeletedAt:   whereHelpernull_Time{field: "`course`.`deleted_at`"},
}

// CourseRels is where relationship names are stored.
var CourseRels = struct {
	Forum                    string
	Appointments             string
	LinkedCourseCertificates string
	CourseHasFiles           string
	Certificates             string
	Directories              string
	Exams                    string
	FieldOfStudyHasCourses   string
	Submissions              string
	UserHasCourses           string
}{
	Forum:                    "Forum",
	Appointments:             "Appointments",
	LinkedCourseCertificates: "LinkedCourseCertificates",
	CourseHasFiles:           "CourseHasFiles",
	Certificates:             "Certificates",
	Directories:              "Directories",
	Exams:                    "Exams",
	FieldOfStudyHasCourses:   "FieldOfStudyHasCourses",
	Submissions:              "Submissions",
	UserHasCourses:           "UserHasCourses",
}

// courseR is where relationships are stored.
type courseR struct {
	Forum                    *Forum                     `boil:"Forum" json:"Forum" toml:"Forum" yaml:"Forum"`
	Appointments             AppointmentSlice           `boil:"Appointments" json:"Appointments" toml:"Appointments" yaml:"Appointments"`
	LinkedCourseCertificates CertificateSlice           `boil:"LinkedCourseCertificates" json:"LinkedCourseCertificates" toml:"LinkedCourseCertificates" yaml:"LinkedCourseCertificates"`
	CourseHasFiles           CourseHasFileSlice         `boil:"CourseHasFiles" json:"CourseHasFiles" toml:"CourseHasFiles" yaml:"CourseHasFiles"`
	Certificates             CertificateSlice           `boil:"Certificates" json:"Certificates" toml:"Certificates" yaml:"Certificates"`
	Directories              DirectorySlice             `boil:"Directories" json:"Directories" toml:"Directories" yaml:"Directories"`
	Exams                    ExamSlice                  `boil:"Exams" json:"Exams" toml:"Exams" yaml:"Exams"`
	FieldOfStudyHasCourses   FieldOfStudyHasCourseSlice `boil:"FieldOfStudyHasCourses" json:"FieldOfStudyHasCourses" toml:"FieldOfStudyHasCourses" yaml:"FieldOfStudyHasCourses"`
	Submissions              SubmissionSlice            `boil:"Submissions" json:"Submissions" toml:"Submissions" yaml:"Submissions"`
	UserHasCourses           UserHasCourseSlice         `boil:"UserHasCourses" json:"UserHasCourses" toml:"UserHasCourses" yaml:"UserHasCourses"`
}

// NewStruct creates a new relationship struct
func (*courseR) NewStruct() *courseR {
	return &courseR{}
}

func (r *courseR) GetForum() *Forum {
	if r == nil {
		return nil
	}
	return r.Forum
}

func (r *courseR) GetAppointments() AppointmentSlice {
	if r == nil {
		return nil
	}
	return r.Appointments
}

func (r *courseR) GetLinkedCourseCertificates() CertificateSlice {
	if r == nil {
		return nil
	}
	return r.LinkedCourseCertificates
}

func (r *courseR) GetCourseHasFiles() CourseHasFileSlice {
	if r == nil {
		return nil
	}
	return r.CourseHasFiles
}

func (r *courseR) GetCertificates() CertificateSlice {
	if r == nil {
		return nil
	}
	return r.Certificates
}

func (r *courseR) GetDirectories() DirectorySlice {
	if r == nil {
		return nil
	}
	return r.Directories
}

func (r *courseR) GetExams() ExamSlice {
	if r == nil {
		return nil
	}
	return r.Exams
}

func (r *courseR) GetFieldOfStudyHasCourses() FieldOfStudyHasCourseSlice {
	if r == nil {
		return nil
	}
	return r.FieldOfStudyHasCourses
}

func (r *courseR) GetSubmissions() SubmissionSlice {
	if r == nil {
		return nil
	}
	return r.Submissions
}

func (r *courseR) GetUserHasCourses() UserHasCourseSlice {
	if r == nil {
		return nil
	}
	return r.UserHasCourses
}

// courseL is where Load methods for each relationship are stored.
type courseL struct{}

var (
	courseAllColumns            = []string{"id", "name", "description", "enroll_key", "forum_id", "created_at", "updated_at", "deleted_at"}
	courseColumnsWithoutDefault = []string{"name", "description", "enroll_key", "forum_id", "created_at", "updated_at", "deleted_at"}
	courseColumnsWithDefault    = []string{"id"}
	coursePrimaryKeyColumns     = []string{"id"}
	courseGeneratedColumns      = []string{}
)

type (
	// CourseSlice is an alias for a slice of pointers to Course.
	// This should almost always be used instead of []Course.
	CourseSlice []*Course
	// CourseHook is the signature for custom Course hook methods
	CourseHook func(context.Context, boil.ContextExecutor, *Course) error

	courseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	courseType                 = reflect.TypeOf(&Course{})
	courseMapping              = queries.MakeStructMapping(courseType)
	coursePrimaryKeyMapping, _ = queries.BindMapping(courseType, courseMapping, coursePrimaryKeyColumns)
	courseInsertCacheMut       sync.RWMutex
	courseInsertCache          = make(map[string]insertCache)
	courseUpdateCacheMut       sync.RWMutex
	courseUpdateCache          = make(map[string]updateCache)
	courseUpsertCacheMut       sync.RWMutex
	courseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var courseAfterSelectHooks []CourseHook

var courseBeforeInsertHooks []CourseHook
var courseAfterInsertHooks []CourseHook

var courseBeforeUpdateHooks []CourseHook
var courseAfterUpdateHooks []CourseHook

var courseBeforeDeleteHooks []CourseHook
var courseAfterDeleteHooks []CourseHook

var courseBeforeUpsertHooks []CourseHook
var courseAfterUpsertHooks []CourseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Course) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Course) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Course) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Course) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Course) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Course) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Course) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Course) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Course) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCourseHook registers your hook function for all future operations.
func AddCourseHook(hookPoint boil.HookPoint, courseHook CourseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		courseAfterSelectHooks = append(courseAfterSelectHooks, courseHook)
	case boil.BeforeInsertHook:
		courseBeforeInsertHooks = append(courseBeforeInsertHooks, courseHook)
	case boil.AfterInsertHook:
		courseAfterInsertHooks = append(courseAfterInsertHooks, courseHook)
	case boil.BeforeUpdateHook:
		courseBeforeUpdateHooks = append(courseBeforeUpdateHooks, courseHook)
	case boil.AfterUpdateHook:
		courseAfterUpdateHooks = append(courseAfterUpdateHooks, courseHook)
	case boil.BeforeDeleteHook:
		courseBeforeDeleteHooks = append(courseBeforeDeleteHooks, courseHook)
	case boil.AfterDeleteHook:
		courseAfterDeleteHooks = append(courseAfterDeleteHooks, courseHook)
	case boil.BeforeUpsertHook:
		courseBeforeUpsertHooks = append(courseBeforeUpsertHooks, courseHook)
	case boil.AfterUpsertHook:
		courseAfterUpsertHooks = append(courseAfterUpsertHooks, courseHook)
	}
}

// One returns a single course record from the query.
func (q courseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Course, error) {
	o := &Course{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for course")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Course records from the query.
func (q courseQuery) All(ctx context.Context, exec boil.ContextExecutor) (CourseSlice, error) {
	var o []*Course

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Course slice")
	}

	if len(courseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Course records in the query.
func (q courseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count course rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q courseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if course exists")
	}

	return count > 0, nil
}

// Forum pointed to by the foreign key.
func (o *Course) Forum(mods ...qm.QueryMod) forumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ForumID),
	}

	queryMods = append(queryMods, mods...)

	return Forums(queryMods...)
}

// Appointments retrieves all the appointment's Appointments with an executor.
func (o *Course) Appointments(mods ...qm.QueryMod) appointmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`appointment`.`course_id`=?", o.ID),
	)

	return Appointments(queryMods...)
}

// LinkedCourseCertificates retrieves all the certificate's Certificates with an executor via linked_course_id column.
func (o *Course) LinkedCourseCertificates(mods ...qm.QueryMod) certificateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`certificate`.`linked_course_id`=?", o.ID),
	)

	return Certificates(queryMods...)
}

// CourseHasFiles retrieves all the course_has_file's CourseHasFiles with an executor.
func (o *Course) CourseHasFiles(mods ...qm.QueryMod) courseHasFileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`course_has_files`.`course_id`=?", o.ID),
	)

	return CourseHasFiles(queryMods...)
}

// Certificates retrieves all the certificate's Certificates with an executor.
func (o *Course) Certificates(mods ...qm.QueryMod) certificateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`course_requires_certificate` on `certificate`.`id` = `course_requires_certificate`.`certificate_id`"),
		qm.Where("`course_requires_certificate`.`course_id`=?", o.ID),
	)

	return Certificates(queryMods...)
}

// Directories retrieves all the directory's Directories with an executor.
func (o *Course) Directories(mods ...qm.QueryMod) directoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`directory`.`course_id`=?", o.ID),
	)

	return Directories(queryMods...)
}

// Exams retrieves all the exam's Exams with an executor.
func (o *Course) Exams(mods ...qm.QueryMod) examQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`exam`.`course_id`=?", o.ID),
	)

	return Exams(queryMods...)
}

// FieldOfStudyHasCourses retrieves all the field_of_study_has_course's FieldOfStudyHasCourses with an executor.
func (o *Course) FieldOfStudyHasCourses(mods ...qm.QueryMod) fieldOfStudyHasCourseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`field_of_study_has_course`.`course_id`=?", o.ID),
	)

	return FieldOfStudyHasCourses(queryMods...)
}

// Submissions retrieves all the submission's Submissions with an executor.
func (o *Course) Submissions(mods ...qm.QueryMod) submissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`submission`.`course_id`=?", o.ID),
	)

	return Submissions(queryMods...)
}

// UserHasCourses retrieves all the user_has_course's UserHasCourses with an executor.
func (o *Course) UserHasCourses(mods ...qm.QueryMod) userHasCourseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_has_course`.`course_id`=?", o.ID),
	)

	return UserHasCourses(queryMods...)
}

// LoadForum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (courseL) LoadForum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ForumID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ForumID {
					continue Outer
				}
			}

			args = append(args, obj.ForumID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`forum`),
		qm.WhereIn(`forum.id in ?`, args...),
		qmhelper.WhereIsNull(`forum.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Forum")
	}

	var resultSlice []*Forum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Forum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for forum")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for forum")
	}

	if len(courseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Forum = foreign
		if foreign.R == nil {
			foreign.R = &forumR{}
		}
		foreign.R.Courses = append(foreign.R.Courses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ForumID == foreign.ID {
				local.R.Forum = foreign
				if foreign.R == nil {
					foreign.R = &forumR{}
				}
				foreign.R.Courses = append(foreign.R.Courses, local)
				break
			}
		}
	}

	return nil
}

// LoadAppointments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadAppointments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`appointment`),
		qm.WhereIn(`appointment.course_id in ?`, args...),
		qmhelper.WhereIsNull(`appointment.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load appointment")
	}

	var resultSlice []*Appointment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice appointment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on appointment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for appointment")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Appointments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appointmentR{}
			}
			foreign.R.Course = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourseID {
				local.R.Appointments = append(local.R.Appointments, foreign)
				if foreign.R == nil {
					foreign.R = &appointmentR{}
				}
				foreign.R.Course = local
				break
			}
		}
	}

	return nil
}

// LoadLinkedCourseCertificates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadLinkedCourseCertificates(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`certificate`),
		qm.WhereIn(`certificate.linked_course_id in ?`, args...),
		qmhelper.WhereIsNull(`certificate.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load certificate")
	}

	var resultSlice []*Certificate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice certificate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on certificate")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for certificate")
	}

	if len(certificateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LinkedCourseCertificates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &certificateR{}
			}
			foreign.R.LinkedCourse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LinkedCourseID {
				local.R.LinkedCourseCertificates = append(local.R.LinkedCourseCertificates, foreign)
				if foreign.R == nil {
					foreign.R = &certificateR{}
				}
				foreign.R.LinkedCourse = local
				break
			}
		}
	}

	return nil
}

// LoadCourseHasFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadCourseHasFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`course_has_files`),
		qm.WhereIn(`course_has_files.course_id in ?`, args...),
		qmhelper.WhereIsNull(`course_has_files.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load course_has_files")
	}

	var resultSlice []*CourseHasFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice course_has_files")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on course_has_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course_has_files")
	}

	if len(courseHasFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CourseHasFiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &courseHasFileR{}
			}
			foreign.R.Course = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourseID {
				local.R.CourseHasFiles = append(local.R.CourseHasFiles, foreign)
				if foreign.R == nil {
					foreign.R = &courseHasFileR{}
				}
				foreign.R.Course = local
				break
			}
		}
	}

	return nil
}

// LoadCertificates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadCertificates(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`certificate`.`id`, `certificate`.`user_id`, `certificate`.`linked_course_id`, `certificate`.`exam_id`, `certificate`.`created_at`, `certificate`.`updated_at`, `certificate`.`deleted_at`, `a`.`course_id`"),
		qm.From("`certificate`"),
		qm.InnerJoin("`course_requires_certificate` as `a` on `certificate`.`id` = `a`.`certificate_id`"),
		qm.WhereIn("`a`.`course_id` in ?", args...),
		qmhelper.WhereIsNull("`certificate`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load certificate")
	}

	var resultSlice []*Certificate

	var localJoinCols []int
	for results.Next() {
		one := new(Certificate)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.UserID, &one.LinkedCourseID, &one.ExamID, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for certificate")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice certificate")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on certificate")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for certificate")
	}

	if len(certificateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Certificates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &certificateR{}
			}
			foreign.R.Courses = append(foreign.R.Courses, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Certificates = append(local.R.Certificates, foreign)
				if foreign.R == nil {
					foreign.R = &certificateR{}
				}
				foreign.R.Courses = append(foreign.R.Courses, local)
				break
			}
		}
	}

	return nil
}

// LoadDirectories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadDirectories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`directory`),
		qm.WhereIn(`directory.course_id in ?`, args...),
		qmhelper.WhereIsNull(`directory.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load directory")
	}

	var resultSlice []*Directory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice directory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on directory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for directory")
	}

	if len(directoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Directories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &directoryR{}
			}
			foreign.R.Course = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourseID {
				local.R.Directories = append(local.R.Directories, foreign)
				if foreign.R == nil {
					foreign.R = &directoryR{}
				}
				foreign.R.Course = local
				break
			}
		}
	}

	return nil
}

// LoadExams allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadExams(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`exam`),
		qm.WhereIn(`exam.course_id in ?`, args...),
		qmhelper.WhereIsNull(`exam.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load exam")
	}

	var resultSlice []*Exam
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice exam")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on exam")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exam")
	}

	if len(examAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Exams = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examR{}
			}
			foreign.R.Course = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourseID {
				local.R.Exams = append(local.R.Exams, foreign)
				if foreign.R == nil {
					foreign.R = &examR{}
				}
				foreign.R.Course = local
				break
			}
		}
	}

	return nil
}

// LoadFieldOfStudyHasCourses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadFieldOfStudyHasCourses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`field_of_study_has_course`),
		qm.WhereIn(`field_of_study_has_course.course_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load field_of_study_has_course")
	}

	var resultSlice []*FieldOfStudyHasCourse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice field_of_study_has_course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on field_of_study_has_course")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for field_of_study_has_course")
	}

	if len(fieldOfStudyHasCourseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FieldOfStudyHasCourses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fieldOfStudyHasCourseR{}
			}
			foreign.R.Course = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourseID {
				local.R.FieldOfStudyHasCourses = append(local.R.FieldOfStudyHasCourses, foreign)
				if foreign.R == nil {
					foreign.R = &fieldOfStudyHasCourseR{}
				}
				foreign.R.Course = local
				break
			}
		}
	}

	return nil
}

// LoadSubmissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadSubmissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`submission`),
		qm.WhereIn(`submission.course_id in ?`, args...),
		qmhelper.WhereIsNull(`submission.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load submission")
	}

	var resultSlice []*Submission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice submission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on submission")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for submission")
	}

	if len(submissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Submissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &submissionR{}
			}
			foreign.R.Course = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourseID {
				local.R.Submissions = append(local.R.Submissions, foreign)
				if foreign.R == nil {
					foreign.R = &submissionR{}
				}
				foreign.R.Course = local
				break
			}
		}
	}

	return nil
}

// LoadUserHasCourses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courseL) LoadUserHasCourses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourse interface{}, mods queries.Applicator) error {
	var slice []*Course
	var object *Course

	if singular {
		object = maybeCourse.(*Course)
	} else {
		slice = *maybeCourse.(*[]*Course)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_has_course`),
		qm.WhereIn(`user_has_course.course_id in ?`, args...),
		qmhelper.WhereIsNull(`user_has_course.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_has_course")
	}

	var resultSlice []*UserHasCourse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_has_course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_has_course")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_has_course")
	}

	if len(userHasCourseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserHasCourses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userHasCourseR{}
			}
			foreign.R.Course = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourseID {
				local.R.UserHasCourses = append(local.R.UserHasCourses, foreign)
				if foreign.R == nil {
					foreign.R = &userHasCourseR{}
				}
				foreign.R.Course = local
				break
			}
		}
	}

	return nil
}

// SetForum of the course to the related item.
// Sets o.R.Forum to related.
// Adds o to related.R.Courses.
func (o *Course) SetForum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Forum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `course` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"forum_id"}),
		strmangle.WhereClause("`", "`", 0, coursePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ForumID = related.ID
	if o.R == nil {
		o.R = &courseR{
			Forum: related,
		}
	} else {
		o.R.Forum = related
	}

	if related.R == nil {
		related.R = &forumR{
			Courses: CourseSlice{o},
		}
	} else {
		related.R.Courses = append(related.R.Courses, o)
	}

	return nil
}

// AddAppointments adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.Appointments.
// Sets related.R.Course appropriately.
func (o *Course) AddAppointments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Appointment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `appointment` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
				strmangle.WhereClause("`", "`", 0, appointmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			Appointments: related,
		}
	} else {
		o.R.Appointments = append(o.R.Appointments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appointmentR{
				Course: o,
			}
		} else {
			rel.R.Course = o
		}
	}
	return nil
}

// AddLinkedCourseCertificates adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.LinkedCourseCertificates.
// Sets related.R.LinkedCourse appropriately.
func (o *Course) AddLinkedCourseCertificates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Certificate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LinkedCourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `certificate` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"linked_course_id"}),
				strmangle.WhereClause("`", "`", 0, certificatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LinkedCourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			LinkedCourseCertificates: related,
		}
	} else {
		o.R.LinkedCourseCertificates = append(o.R.LinkedCourseCertificates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &certificateR{
				LinkedCourse: o,
			}
		} else {
			rel.R.LinkedCourse = o
		}
	}
	return nil
}

// AddCourseHasFiles adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.CourseHasFiles.
// Sets related.R.Course appropriately.
func (o *Course) AddCourseHasFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CourseHasFile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `course_has_files` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
				strmangle.WhereClause("`", "`", 0, courseHasFilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.CourseID, rel.FileID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			CourseHasFiles: related,
		}
	} else {
		o.R.CourseHasFiles = append(o.R.CourseHasFiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &courseHasFileR{
				Course: o,
			}
		} else {
			rel.R.Course = o
		}
	}
	return nil
}

// AddCertificates adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.Certificates.
// Sets related.R.Courses appropriately.
func (o *Course) AddCertificates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Certificate) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `course_requires_certificate` (`course_id`, `certificate_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &courseR{
			Certificates: related,
		}
	} else {
		o.R.Certificates = append(o.R.Certificates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &certificateR{
				Courses: CourseSlice{o},
			}
		} else {
			rel.R.Courses = append(rel.R.Courses, o)
		}
	}
	return nil
}

// SetCertificates removes all previously related items of the
// course replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Courses's Certificates accordingly.
// Replaces o.R.Certificates with related.
// Sets related.R.Courses's Certificates accordingly.
func (o *Course) SetCertificates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Certificate) error {
	query := "delete from `course_requires_certificate` where `course_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCertificatesFromCoursesSlice(o, related)
	if o.R != nil {
		o.R.Certificates = nil
	}

	return o.AddCertificates(ctx, exec, insert, related...)
}

// RemoveCertificates relationships from objects passed in.
// Removes related items from R.Certificates (uses pointer comparison, removal does not keep order)
// Sets related.R.Courses.
func (o *Course) RemoveCertificates(ctx context.Context, exec boil.ContextExecutor, related ...*Certificate) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `course_requires_certificate` where `course_id` = ? and `certificate_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCertificatesFromCoursesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Certificates {
			if rel != ri {
				continue
			}

			ln := len(o.R.Certificates)
			if ln > 1 && i < ln-1 {
				o.R.Certificates[i] = o.R.Certificates[ln-1]
			}
			o.R.Certificates = o.R.Certificates[:ln-1]
			break
		}
	}

	return nil
}

func removeCertificatesFromCoursesSlice(o *Course, related []*Certificate) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Courses {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Courses)
			if ln > 1 && i < ln-1 {
				rel.R.Courses[i] = rel.R.Courses[ln-1]
			}
			rel.R.Courses = rel.R.Courses[:ln-1]
			break
		}
	}
}

// AddDirectories adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.Directories.
// Sets related.R.Course appropriately.
func (o *Course) AddDirectories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Directory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `directory` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
				strmangle.WhereClause("`", "`", 0, directoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			Directories: related,
		}
	} else {
		o.R.Directories = append(o.R.Directories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &directoryR{
				Course: o,
			}
		} else {
			rel.R.Course = o
		}
	}
	return nil
}

// AddExams adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.Exams.
// Sets related.R.Course appropriately.
func (o *Course) AddExams(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Exam) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `exam` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
				strmangle.WhereClause("`", "`", 0, examPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			Exams: related,
		}
	} else {
		o.R.Exams = append(o.R.Exams, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examR{
				Course: o,
			}
		} else {
			rel.R.Course = o
		}
	}
	return nil
}

// AddFieldOfStudyHasCourses adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.FieldOfStudyHasCourses.
// Sets related.R.Course appropriately.
func (o *Course) AddFieldOfStudyHasCourses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FieldOfStudyHasCourse) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `field_of_study_has_course` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
				strmangle.WhereClause("`", "`", 0, fieldOfStudyHasCoursePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.FieldOfStudyID, rel.CourseID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			FieldOfStudyHasCourses: related,
		}
	} else {
		o.R.FieldOfStudyHasCourses = append(o.R.FieldOfStudyHasCourses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fieldOfStudyHasCourseR{
				Course: o,
			}
		} else {
			rel.R.Course = o
		}
	}
	return nil
}

// AddSubmissions adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.Submissions.
// Sets related.R.Course appropriately.
func (o *Course) AddSubmissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Submission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `submission` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
				strmangle.WhereClause("`", "`", 0, submissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			Submissions: related,
		}
	} else {
		o.R.Submissions = append(o.R.Submissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &submissionR{
				Course: o,
			}
		} else {
			rel.R.Course = o
		}
	}
	return nil
}

// AddUserHasCourses adds the given related objects to the existing relationships
// of the course, optionally inserting them as new records.
// Appends related to o.R.UserHasCourses.
// Sets related.R.Course appropriately.
func (o *Course) AddUserHasCourses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserHasCourse) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_has_course` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
				strmangle.WhereClause("`", "`", 0, userHasCoursePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.CourseID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courseR{
			UserHasCourses: related,
		}
	} else {
		o.R.UserHasCourses = append(o.R.UserHasCourses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userHasCourseR{
				Course: o,
			}
		} else {
			rel.R.Course = o
		}
	}
	return nil
}

// Courses retrieves all the records using an executor.
func Courses(mods ...qm.QueryMod) courseQuery {
	mods = append(mods, qm.From("`course`"), qmhelper.WhereIsNull("`course`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`course`.*"})
	}

	return courseQuery{q}
}

// FindCourse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCourse(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Course, error) {
	courseObj := &Course{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `course` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, courseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from course")
	}

	if err = courseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return courseObj, err
	}

	return courseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Course) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no course provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(courseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	courseInsertCacheMut.RLock()
	cache, cached := courseInsertCache[key]
	courseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			courseAllColumns,
			courseColumnsWithDefault,
			courseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(courseType, courseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(courseType, courseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `course` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `course` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `course` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, coursePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into course")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == courseMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for course")
	}

CacheNoHooks:
	if !cached {
		courseInsertCacheMut.Lock()
		courseInsertCache[key] = cache
		courseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Course.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Course) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	courseUpdateCacheMut.RLock()
	cache, cached := courseUpdateCache[key]
	courseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			courseAllColumns,
			coursePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update course, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `course` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, coursePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(courseType, courseMapping, append(wl, coursePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update course row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for course")
	}

	if !cached {
		courseUpdateCacheMut.Lock()
		courseUpdateCache[key] = cache
		courseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q courseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for course")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for course")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CourseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `course` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, coursePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in course slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all course")
	}
	return rowsAff, nil
}

var mySQLCourseUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Course) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no course provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(courseColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCourseUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	courseUpsertCacheMut.RLock()
	cache, cached := courseUpsertCache[key]
	courseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			courseAllColumns,
			courseColumnsWithDefault,
			courseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			courseAllColumns,
			coursePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert course, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`course`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `course` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(courseType, courseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(courseType, courseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for course")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == courseMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(courseType, courseMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for course")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for course")
	}

CacheNoHooks:
	if !cached {
		courseUpsertCacheMut.Lock()
		courseUpsertCache[key] = cache
		courseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Course record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Course) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Course provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), coursePrimaryKeyMapping)
		sql = "DELETE FROM `course` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `course` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(courseType, courseMapping, append(wl, coursePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from course")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for course")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q courseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no courseQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from course")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for course")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CourseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(courseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coursePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `course` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, coursePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coursePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `course` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, coursePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from course slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for course")
	}

	if len(courseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Course) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCourse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CourseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CourseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), coursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `course`.* FROM `course` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, coursePrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CourseSlice")
	}

	*o = slice

	return nil
}

// CourseExists checks if the Course row exists.
func CourseExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `course` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if course exists")
	}

	return exists, nil
}

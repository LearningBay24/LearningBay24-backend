// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CourseHasFile is an object representing the database table.
type CourseHasFile struct {
	CourseID  int       `boil:"course_id" json:"course_id" toml:"course_id" yaml:"course_id"`
	FileID    int       `boil:"file_id" json:"file_id" toml:"file_id" yaml:"file_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *courseHasFileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L courseHasFileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CourseHasFileColumns = struct {
	CourseID  string
	FileID    string
	CreatedAt string
	DeletedAt string
}{
	CourseID:  "course_id",
	FileID:    "file_id",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
}

var CourseHasFileTableColumns = struct {
	CourseID  string
	FileID    string
	CreatedAt string
	DeletedAt string
}{
	CourseID:  "course_has_files.course_id",
	FileID:    "course_has_files.file_id",
	CreatedAt: "course_has_files.created_at",
	DeletedAt: "course_has_files.deleted_at",
}

// Generated where

var CourseHasFileWhere = struct {
	CourseID  whereHelperint
	FileID    whereHelperint
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	CourseID:  whereHelperint{field: "`course_has_files`.`course_id`"},
	FileID:    whereHelperint{field: "`course_has_files`.`file_id`"},
	CreatedAt: whereHelpertime_Time{field: "`course_has_files`.`created_at`"},
	DeletedAt: whereHelpernull_Time{field: "`course_has_files`.`deleted_at`"},
}

// CourseHasFileRels is where relationship names are stored.
var CourseHasFileRels = struct {
	Course string
	File   string
}{
	Course: "Course",
	File:   "File",
}

// courseHasFileR is where relationships are stored.
type courseHasFileR struct {
	Course *Course `boil:"Course" json:"Course" toml:"Course" yaml:"Course"`
	File   *File   `boil:"File" json:"File" toml:"File" yaml:"File"`
}

// NewStruct creates a new relationship struct
func (*courseHasFileR) NewStruct() *courseHasFileR {
	return &courseHasFileR{}
}

func (r *courseHasFileR) GetCourse() *Course {
	if r == nil {
		return nil
	}
	return r.Course
}

func (r *courseHasFileR) GetFile() *File {
	if r == nil {
		return nil
	}
	return r.File
}

// courseHasFileL is where Load methods for each relationship are stored.
type courseHasFileL struct{}

var (
	courseHasFileAllColumns            = []string{"course_id", "file_id", "created_at", "deleted_at"}
	courseHasFileColumnsWithoutDefault = []string{"course_id", "file_id", "deleted_at"}
	courseHasFileColumnsWithDefault    = []string{"created_at"}
	courseHasFilePrimaryKeyColumns     = []string{"course_id", "file_id"}
	courseHasFileGeneratedColumns      = []string{}
)

type (
	// CourseHasFileSlice is an alias for a slice of pointers to CourseHasFile.
	// This should almost always be used instead of []CourseHasFile.
	CourseHasFileSlice []*CourseHasFile
	// CourseHasFileHook is the signature for custom CourseHasFile hook methods
	CourseHasFileHook func(context.Context, boil.ContextExecutor, *CourseHasFile) error

	courseHasFileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	courseHasFileType                 = reflect.TypeOf(&CourseHasFile{})
	courseHasFileMapping              = queries.MakeStructMapping(courseHasFileType)
	courseHasFilePrimaryKeyMapping, _ = queries.BindMapping(courseHasFileType, courseHasFileMapping, courseHasFilePrimaryKeyColumns)
	courseHasFileInsertCacheMut       sync.RWMutex
	courseHasFileInsertCache          = make(map[string]insertCache)
	courseHasFileUpdateCacheMut       sync.RWMutex
	courseHasFileUpdateCache          = make(map[string]updateCache)
	courseHasFileUpsertCacheMut       sync.RWMutex
	courseHasFileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var courseHasFileAfterSelectHooks []CourseHasFileHook

var courseHasFileBeforeInsertHooks []CourseHasFileHook
var courseHasFileAfterInsertHooks []CourseHasFileHook

var courseHasFileBeforeUpdateHooks []CourseHasFileHook
var courseHasFileAfterUpdateHooks []CourseHasFileHook

var courseHasFileBeforeDeleteHooks []CourseHasFileHook
var courseHasFileAfterDeleteHooks []CourseHasFileHook

var courseHasFileBeforeUpsertHooks []CourseHasFileHook
var courseHasFileAfterUpsertHooks []CourseHasFileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CourseHasFile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseHasFileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CourseHasFile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseHasFileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CourseHasFile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseHasFileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CourseHasFile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseHasFileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CourseHasFile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseHasFileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CourseHasFile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseHasFileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CourseHasFile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseHasFileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CourseHasFile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseHasFileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CourseHasFile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseHasFileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCourseHasFileHook registers your hook function for all future operations.
func AddCourseHasFileHook(hookPoint boil.HookPoint, courseHasFileHook CourseHasFileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		courseHasFileAfterSelectHooks = append(courseHasFileAfterSelectHooks, courseHasFileHook)
	case boil.BeforeInsertHook:
		courseHasFileBeforeInsertHooks = append(courseHasFileBeforeInsertHooks, courseHasFileHook)
	case boil.AfterInsertHook:
		courseHasFileAfterInsertHooks = append(courseHasFileAfterInsertHooks, courseHasFileHook)
	case boil.BeforeUpdateHook:
		courseHasFileBeforeUpdateHooks = append(courseHasFileBeforeUpdateHooks, courseHasFileHook)
	case boil.AfterUpdateHook:
		courseHasFileAfterUpdateHooks = append(courseHasFileAfterUpdateHooks, courseHasFileHook)
	case boil.BeforeDeleteHook:
		courseHasFileBeforeDeleteHooks = append(courseHasFileBeforeDeleteHooks, courseHasFileHook)
	case boil.AfterDeleteHook:
		courseHasFileAfterDeleteHooks = append(courseHasFileAfterDeleteHooks, courseHasFileHook)
	case boil.BeforeUpsertHook:
		courseHasFileBeforeUpsertHooks = append(courseHasFileBeforeUpsertHooks, courseHasFileHook)
	case boil.AfterUpsertHook:
		courseHasFileAfterUpsertHooks = append(courseHasFileAfterUpsertHooks, courseHasFileHook)
	}
}

// One returns a single courseHasFile record from the query.
func (q courseHasFileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CourseHasFile, error) {
	o := &CourseHasFile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for course_has_files")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CourseHasFile records from the query.
func (q courseHasFileQuery) All(ctx context.Context, exec boil.ContextExecutor) (CourseHasFileSlice, error) {
	var o []*CourseHasFile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CourseHasFile slice")
	}

	if len(courseHasFileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CourseHasFile records in the query.
func (q courseHasFileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count course_has_files rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q courseHasFileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if course_has_files exists")
	}

	return count > 0, nil
}

// Course pointed to by the foreign key.
func (o *CourseHasFile) Course(mods ...qm.QueryMod) courseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CourseID),
	}

	queryMods = append(queryMods, mods...)

	return Courses(queryMods...)
}

// File pointed to by the foreign key.
func (o *CourseHasFile) File(mods ...qm.QueryMod) fileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.FileID),
	}

	queryMods = append(queryMods, mods...)

	return Files(queryMods...)
}

// LoadCourse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (courseHasFileL) LoadCourse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourseHasFile interface{}, mods queries.Applicator) error {
	var slice []*CourseHasFile
	var object *CourseHasFile

	if singular {
		object = maybeCourseHasFile.(*CourseHasFile)
	} else {
		slice = *maybeCourseHasFile.(*[]*CourseHasFile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseHasFileR{}
		}
		args = append(args, object.CourseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseHasFileR{}
			}

			for _, a := range args {
				if a == obj.CourseID {
					continue Outer
				}
			}

			args = append(args, obj.CourseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`course`),
		qm.WhereIn(`course.id in ?`, args...),
		qmhelper.WhereIsNull(`course.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Course")
	}

	var resultSlice []*Course
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for course")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course")
	}

	if len(courseHasFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Course = foreign
		if foreign.R == nil {
			foreign.R = &courseR{}
		}
		foreign.R.CourseHasFiles = append(foreign.R.CourseHasFiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CourseID == foreign.ID {
				local.R.Course = foreign
				if foreign.R == nil {
					foreign.R = &courseR{}
				}
				foreign.R.CourseHasFiles = append(foreign.R.CourseHasFiles, local)
				break
			}
		}
	}

	return nil
}

// LoadFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (courseHasFileL) LoadFile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourseHasFile interface{}, mods queries.Applicator) error {
	var slice []*CourseHasFile
	var object *CourseHasFile

	if singular {
		object = maybeCourseHasFile.(*CourseHasFile)
	} else {
		slice = *maybeCourseHasFile.(*[]*CourseHasFile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseHasFileR{}
		}
		args = append(args, object.FileID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseHasFileR{}
			}

			for _, a := range args {
				if a == obj.FileID {
					continue Outer
				}
			}

			args = append(args, obj.FileID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`file`),
		qm.WhereIn(`file.id in ?`, args...),
		qmhelper.WhereIsNull(`file.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load File")
	}

	var resultSlice []*File
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice File")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for file")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for file")
	}

	if len(courseHasFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.File = foreign
		if foreign.R == nil {
			foreign.R = &fileR{}
		}
		foreign.R.CourseHasFiles = append(foreign.R.CourseHasFiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FileID == foreign.ID {
				local.R.File = foreign
				if foreign.R == nil {
					foreign.R = &fileR{}
				}
				foreign.R.CourseHasFiles = append(foreign.R.CourseHasFiles, local)
				break
			}
		}
	}

	return nil
}

// SetCourse of the courseHasFile to the related item.
// Sets o.R.Course to related.
// Adds o to related.R.CourseHasFiles.
func (o *CourseHasFile) SetCourse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Course) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `course_has_files` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
		strmangle.WhereClause("`", "`", 0, courseHasFilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CourseID, o.FileID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CourseID = related.ID
	if o.R == nil {
		o.R = &courseHasFileR{
			Course: related,
		}
	} else {
		o.R.Course = related
	}

	if related.R == nil {
		related.R = &courseR{
			CourseHasFiles: CourseHasFileSlice{o},
		}
	} else {
		related.R.CourseHasFiles = append(related.R.CourseHasFiles, o)
	}

	return nil
}

// SetFile of the courseHasFile to the related item.
// Sets o.R.File to related.
// Adds o to related.R.CourseHasFiles.
func (o *CourseHasFile) SetFile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *File) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `course_has_files` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"file_id"}),
		strmangle.WhereClause("`", "`", 0, courseHasFilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CourseID, o.FileID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FileID = related.ID
	if o.R == nil {
		o.R = &courseHasFileR{
			File: related,
		}
	} else {
		o.R.File = related
	}

	if related.R == nil {
		related.R = &fileR{
			CourseHasFiles: CourseHasFileSlice{o},
		}
	} else {
		related.R.CourseHasFiles = append(related.R.CourseHasFiles, o)
	}

	return nil
}

// CourseHasFiles retrieves all the records using an executor.
func CourseHasFiles(mods ...qm.QueryMod) courseHasFileQuery {
	mods = append(mods, qm.From("`course_has_files`"), qmhelper.WhereIsNull("`course_has_files`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`course_has_files`.*"})
	}

	return courseHasFileQuery{q}
}

// FindCourseHasFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCourseHasFile(ctx context.Context, exec boil.ContextExecutor, courseID int, fileID int, selectCols ...string) (*CourseHasFile, error) {
	courseHasFileObj := &CourseHasFile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `course_has_files` where `course_id`=? AND `file_id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, courseID, fileID)

	err := q.Bind(ctx, exec, courseHasFileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from course_has_files")
	}

	if err = courseHasFileObj.doAfterSelectHooks(ctx, exec); err != nil {
		return courseHasFileObj, err
	}

	return courseHasFileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CourseHasFile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no course_has_files provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(courseHasFileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	courseHasFileInsertCacheMut.RLock()
	cache, cached := courseHasFileInsertCache[key]
	courseHasFileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			courseHasFileAllColumns,
			courseHasFileColumnsWithDefault,
			courseHasFileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(courseHasFileType, courseHasFileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(courseHasFileType, courseHasFileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `course_has_files` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `course_has_files` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `course_has_files` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, courseHasFilePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into course_has_files")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CourseID,
		o.FileID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for course_has_files")
	}

CacheNoHooks:
	if !cached {
		courseHasFileInsertCacheMut.Lock()
		courseHasFileInsertCache[key] = cache
		courseHasFileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CourseHasFile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CourseHasFile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	courseHasFileUpdateCacheMut.RLock()
	cache, cached := courseHasFileUpdateCache[key]
	courseHasFileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			courseHasFileAllColumns,
			courseHasFilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update course_has_files, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `course_has_files` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, courseHasFilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(courseHasFileType, courseHasFileMapping, append(wl, courseHasFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update course_has_files row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for course_has_files")
	}

	if !cached {
		courseHasFileUpdateCacheMut.Lock()
		courseHasFileUpdateCache[key] = cache
		courseHasFileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q courseHasFileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for course_has_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for course_has_files")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CourseHasFileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), courseHasFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `course_has_files` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, courseHasFilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in courseHasFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all courseHasFile")
	}
	return rowsAff, nil
}

var mySQLCourseHasFileUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CourseHasFile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no course_has_files provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(courseHasFileColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCourseHasFileUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	courseHasFileUpsertCacheMut.RLock()
	cache, cached := courseHasFileUpsertCache[key]
	courseHasFileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			courseHasFileAllColumns,
			courseHasFileColumnsWithDefault,
			courseHasFileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			courseHasFileAllColumns,
			courseHasFilePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert course_has_files, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`course_has_files`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `course_has_files` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(courseHasFileType, courseHasFileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(courseHasFileType, courseHasFileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for course_has_files")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(courseHasFileType, courseHasFileMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for course_has_files")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for course_has_files")
	}

CacheNoHooks:
	if !cached {
		courseHasFileUpsertCacheMut.Lock()
		courseHasFileUpsertCache[key] = cache
		courseHasFileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CourseHasFile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CourseHasFile) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CourseHasFile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), courseHasFilePrimaryKeyMapping)
		sql = "DELETE FROM `course_has_files` WHERE `course_id`=? AND `file_id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `course_has_files` SET %s WHERE `course_id`=? AND `file_id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(courseHasFileType, courseHasFileMapping, append(wl, courseHasFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from course_has_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for course_has_files")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q courseHasFileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no courseHasFileQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from course_has_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for course_has_files")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CourseHasFileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(courseHasFileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), courseHasFilePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `course_has_files` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, courseHasFilePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), courseHasFilePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `course_has_files` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, courseHasFilePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from courseHasFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for course_has_files")
	}

	if len(courseHasFileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CourseHasFile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCourseHasFile(ctx, exec, o.CourseID, o.FileID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CourseHasFileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CourseHasFileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), courseHasFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `course_has_files`.* FROM `course_has_files` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, courseHasFilePrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CourseHasFileSlice")
	}

	*o = slice

	return nil
}

// CourseHasFileExists checks if the CourseHasFile row exists.
func CourseHasFileExists(ctx context.Context, exec boil.ContextExecutor, courseID int, fileID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `course_has_files` where `course_id`=? AND `file_id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, courseID, fileID)
	}
	row := exec.QueryRowContext(ctx, sql, courseID, fileID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if course_has_files exists")
	}

	return exists, nil
}

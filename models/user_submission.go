// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserSubmission is an object representing the database table.
type UserSubmission struct {
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Name of the submission.
	Name null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	// The user that submitted this solution.
	SubmitterID int `boil:"submitter_id" json:"submitter_id" toml:"submitter_id" yaml:"submitter_id"`
	// The submission this user is submitting their solution to.
	SubmissionID int `boil:"submission_id" json:"submission_id" toml:"submission_id" yaml:"submission_id"`
	// The grade of the user's solution.
	Grade null.Int `boil:"grade" json:"grade,omitempty" toml:"grade" yaml:"grade,omitempty"`
	// Whether the user is allowed to submit their solutions after the deadline defined in the submission is over.
	IgnoresSubmissionDeadline int8 `boil:"ignores_submission_deadline" json:"ignores_submission_deadline" toml:"ignores_submission_deadline" yaml:"ignores_submission_deadline"`
	// When the user submitted their solution.
	SubmissionTime null.Time `boil:"submission_time" json:"submission_time,omitempty" toml:"submission_time" yaml:"submission_time,omitempty"`
	// When this user_submission was created.
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *userSubmissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userSubmissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserSubmissionColumns = struct {
	ID                        string
	Name                      string
	SubmitterID               string
	SubmissionID              string
	Grade                     string
	IgnoresSubmissionDeadline string
	SubmissionTime            string
	CreatedAt                 string
	DeletedAt                 string
	UpdatedAt                 string
}{
	ID:                        "id",
	Name:                      "name",
	SubmitterID:               "submitter_id",
	SubmissionID:              "submission_id",
	Grade:                     "grade",
	IgnoresSubmissionDeadline: "ignores_submission_deadline",
	SubmissionTime:            "submission_time",
	CreatedAt:                 "created_at",
	DeletedAt:                 "deleted_at",
	UpdatedAt:                 "updated_at",
}

var UserSubmissionTableColumns = struct {
	ID                        string
	Name                      string
	SubmitterID               string
	SubmissionID              string
	Grade                     string
	IgnoresSubmissionDeadline string
	SubmissionTime            string
	CreatedAt                 string
	DeletedAt                 string
	UpdatedAt                 string
}{
	ID:                        "user_submission.id",
	Name:                      "user_submission.name",
	SubmitterID:               "user_submission.submitter_id",
	SubmissionID:              "user_submission.submission_id",
	Grade:                     "user_submission.grade",
	IgnoresSubmissionDeadline: "user_submission.ignores_submission_deadline",
	SubmissionTime:            "user_submission.submission_time",
	CreatedAt:                 "user_submission.created_at",
	DeletedAt:                 "user_submission.deleted_at",
	UpdatedAt:                 "user_submission.updated_at",
}

// Generated where

var UserSubmissionWhere = struct {
	ID                        whereHelperint
	Name                      whereHelpernull_String
	SubmitterID               whereHelperint
	SubmissionID              whereHelperint
	Grade                     whereHelpernull_Int
	IgnoresSubmissionDeadline whereHelperint8
	SubmissionTime            whereHelpernull_Time
	CreatedAt                 whereHelpertime_Time
	DeletedAt                 whereHelpernull_Time
	UpdatedAt                 whereHelpernull_Time
}{
	ID:                        whereHelperint{field: "`user_submission`.`id`"},
	Name:                      whereHelpernull_String{field: "`user_submission`.`name`"},
	SubmitterID:               whereHelperint{field: "`user_submission`.`submitter_id`"},
	SubmissionID:              whereHelperint{field: "`user_submission`.`submission_id`"},
	Grade:                     whereHelpernull_Int{field: "`user_submission`.`grade`"},
	IgnoresSubmissionDeadline: whereHelperint8{field: "`user_submission`.`ignores_submission_deadline`"},
	SubmissionTime:            whereHelpernull_Time{field: "`user_submission`.`submission_time`"},
	CreatedAt:                 whereHelpertime_Time{field: "`user_submission`.`created_at`"},
	DeletedAt:                 whereHelpernull_Time{field: "`user_submission`.`deleted_at`"},
	UpdatedAt:                 whereHelpernull_Time{field: "`user_submission`.`updated_at`"},
}

// UserSubmissionRels is where relationship names are stored.
var UserSubmissionRels = struct {
	Submitter  string
	Submission string
	Files      string
}{
	Submitter:  "Submitter",
	Submission: "Submission",
	Files:      "Files",
}

// userSubmissionR is where relationships are stored.
type userSubmissionR struct {
	Submitter  *User       `boil:"Submitter" json:"Submitter" toml:"Submitter" yaml:"Submitter"`
	Submission *Submission `boil:"Submission" json:"Submission" toml:"Submission" yaml:"Submission"`
	Files      FileSlice   `boil:"Files" json:"Files" toml:"Files" yaml:"Files"`
}

// NewStruct creates a new relationship struct
func (*userSubmissionR) NewStruct() *userSubmissionR {
	return &userSubmissionR{}
}

func (r *userSubmissionR) GetSubmitter() *User {
	if r == nil {
		return nil
	}
	return r.Submitter
}

func (r *userSubmissionR) GetSubmission() *Submission {
	if r == nil {
		return nil
	}
	return r.Submission
}

func (r *userSubmissionR) GetFiles() FileSlice {
	if r == nil {
		return nil
	}
	return r.Files
}

// userSubmissionL is where Load methods for each relationship are stored.
type userSubmissionL struct{}

var (
	userSubmissionAllColumns            = []string{"id", "name", "submitter_id", "submission_id", "grade", "ignores_submission_deadline", "submission_time", "created_at", "deleted_at", "updated_at"}
	userSubmissionColumnsWithoutDefault = []string{"name", "submitter_id", "submission_id", "grade", "submission_time", "deleted_at", "updated_at"}
	userSubmissionColumnsWithDefault    = []string{"id", "ignores_submission_deadline", "created_at"}
	userSubmissionPrimaryKeyColumns     = []string{"id"}
	userSubmissionGeneratedColumns      = []string{}
)

type (
	// UserSubmissionSlice is an alias for a slice of pointers to UserSubmission.
	// This should almost always be used instead of []UserSubmission.
	UserSubmissionSlice []*UserSubmission
	// UserSubmissionHook is the signature for custom UserSubmission hook methods
	UserSubmissionHook func(context.Context, boil.ContextExecutor, *UserSubmission) error

	userSubmissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userSubmissionType                 = reflect.TypeOf(&UserSubmission{})
	userSubmissionMapping              = queries.MakeStructMapping(userSubmissionType)
	userSubmissionPrimaryKeyMapping, _ = queries.BindMapping(userSubmissionType, userSubmissionMapping, userSubmissionPrimaryKeyColumns)
	userSubmissionInsertCacheMut       sync.RWMutex
	userSubmissionInsertCache          = make(map[string]insertCache)
	userSubmissionUpdateCacheMut       sync.RWMutex
	userSubmissionUpdateCache          = make(map[string]updateCache)
	userSubmissionUpsertCacheMut       sync.RWMutex
	userSubmissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userSubmissionAfterSelectHooks []UserSubmissionHook

var userSubmissionBeforeInsertHooks []UserSubmissionHook
var userSubmissionAfterInsertHooks []UserSubmissionHook

var userSubmissionBeforeUpdateHooks []UserSubmissionHook
var userSubmissionAfterUpdateHooks []UserSubmissionHook

var userSubmissionBeforeDeleteHooks []UserSubmissionHook
var userSubmissionAfterDeleteHooks []UserSubmissionHook

var userSubmissionBeforeUpsertHooks []UserSubmissionHook
var userSubmissionAfterUpsertHooks []UserSubmissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserSubmission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubmissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserSubmission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubmissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserSubmission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubmissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserSubmission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubmissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserSubmission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubmissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserSubmission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubmissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserSubmission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubmissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserSubmission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubmissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserSubmission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubmissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserSubmissionHook registers your hook function for all future operations.
func AddUserSubmissionHook(hookPoint boil.HookPoint, userSubmissionHook UserSubmissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userSubmissionAfterSelectHooks = append(userSubmissionAfterSelectHooks, userSubmissionHook)
	case boil.BeforeInsertHook:
		userSubmissionBeforeInsertHooks = append(userSubmissionBeforeInsertHooks, userSubmissionHook)
	case boil.AfterInsertHook:
		userSubmissionAfterInsertHooks = append(userSubmissionAfterInsertHooks, userSubmissionHook)
	case boil.BeforeUpdateHook:
		userSubmissionBeforeUpdateHooks = append(userSubmissionBeforeUpdateHooks, userSubmissionHook)
	case boil.AfterUpdateHook:
		userSubmissionAfterUpdateHooks = append(userSubmissionAfterUpdateHooks, userSubmissionHook)
	case boil.BeforeDeleteHook:
		userSubmissionBeforeDeleteHooks = append(userSubmissionBeforeDeleteHooks, userSubmissionHook)
	case boil.AfterDeleteHook:
		userSubmissionAfterDeleteHooks = append(userSubmissionAfterDeleteHooks, userSubmissionHook)
	case boil.BeforeUpsertHook:
		userSubmissionBeforeUpsertHooks = append(userSubmissionBeforeUpsertHooks, userSubmissionHook)
	case boil.AfterUpsertHook:
		userSubmissionAfterUpsertHooks = append(userSubmissionAfterUpsertHooks, userSubmissionHook)
	}
}

// One returns a single userSubmission record from the query.
func (q userSubmissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserSubmission, error) {
	o := &UserSubmission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_submission")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserSubmission records from the query.
func (q userSubmissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSubmissionSlice, error) {
	var o []*UserSubmission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserSubmission slice")
	}

	if len(userSubmissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserSubmission records in the query.
func (q userSubmissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_submission rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userSubmissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_submission exists")
	}

	return count > 0, nil
}

// Submitter pointed to by the foreign key.
func (o *UserSubmission) Submitter(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SubmitterID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Submission pointed to by the foreign key.
func (o *UserSubmission) Submission(mods ...qm.QueryMod) submissionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SubmissionID),
	}

	queryMods = append(queryMods, mods...)

	return Submissions(queryMods...)
}

// Files retrieves all the file's Files with an executor.
func (o *UserSubmission) Files(mods ...qm.QueryMod) fileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`user_submission_has_files` on `file`.`id` = `user_submission_has_files`.`file_id`"),
		qm.Where("`user_submission_has_files`.`user_submission_id`=?", o.ID),
	)

	return Files(queryMods...)
}

// LoadSubmitter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userSubmissionL) LoadSubmitter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserSubmission interface{}, mods queries.Applicator) error {
	var slice []*UserSubmission
	var object *UserSubmission

	if singular {
		object = maybeUserSubmission.(*UserSubmission)
	} else {
		slice = *maybeUserSubmission.(*[]*UserSubmission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userSubmissionR{}
		}
		args = append(args, object.SubmitterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userSubmissionR{}
			}

			for _, a := range args {
				if a == obj.SubmitterID {
					continue Outer
				}
			}

			args = append(args, obj.SubmitterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userSubmissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Submitter = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SubmitterUserSubmissions = append(foreign.R.SubmitterUserSubmissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SubmitterID == foreign.ID {
				local.R.Submitter = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SubmitterUserSubmissions = append(foreign.R.SubmitterUserSubmissions, local)
				break
			}
		}
	}

	return nil
}

// LoadSubmission allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userSubmissionL) LoadSubmission(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserSubmission interface{}, mods queries.Applicator) error {
	var slice []*UserSubmission
	var object *UserSubmission

	if singular {
		object = maybeUserSubmission.(*UserSubmission)
	} else {
		slice = *maybeUserSubmission.(*[]*UserSubmission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userSubmissionR{}
		}
		args = append(args, object.SubmissionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userSubmissionR{}
			}

			for _, a := range args {
				if a == obj.SubmissionID {
					continue Outer
				}
			}

			args = append(args, obj.SubmissionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`submission`),
		qm.WhereIn(`submission.id in ?`, args...),
		qmhelper.WhereIsNull(`submission.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Submission")
	}

	var resultSlice []*Submission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Submission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for submission")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for submission")
	}

	if len(userSubmissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Submission = foreign
		if foreign.R == nil {
			foreign.R = &submissionR{}
		}
		foreign.R.UserSubmissions = append(foreign.R.UserSubmissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SubmissionID == foreign.ID {
				local.R.Submission = foreign
				if foreign.R == nil {
					foreign.R = &submissionR{}
				}
				foreign.R.UserSubmissions = append(foreign.R.UserSubmissions, local)
				break
			}
		}
	}

	return nil
}

// LoadFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userSubmissionL) LoadFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserSubmission interface{}, mods queries.Applicator) error {
	var slice []*UserSubmission
	var object *UserSubmission

	if singular {
		object = maybeUserSubmission.(*UserSubmission)
	} else {
		slice = *maybeUserSubmission.(*[]*UserSubmission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userSubmissionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userSubmissionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`file`.`id`, `file`.`name`, `file`.`uri`, `file`.`local`, `file`.`uploader_id`, `file`.`created_at`, `file`.`deleted_at`, `a`.`user_submission_id`"),
		qm.From("`file`"),
		qm.InnerJoin("`user_submission_has_files` as `a` on `file`.`id` = `a`.`file_id`"),
		qm.WhereIn("`a`.`user_submission_id` in ?", args...),
		qmhelper.WhereIsNull("`file`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load file")
	}

	var resultSlice []*File

	var localJoinCols []int
	for results.Next() {
		one := new(File)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.URI, &one.Local, &one.UploaderID, &one.CreatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for file")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice file")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on file")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for file")
	}

	if len(fileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Files = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fileR{}
			}
			foreign.R.UserSubmissions = append(foreign.R.UserSubmissions, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Files = append(local.R.Files, foreign)
				if foreign.R == nil {
					foreign.R = &fileR{}
				}
				foreign.R.UserSubmissions = append(foreign.R.UserSubmissions, local)
				break
			}
		}
	}

	return nil
}

// SetSubmitter of the userSubmission to the related item.
// Sets o.R.Submitter to related.
// Adds o to related.R.SubmitterUserSubmissions.
func (o *UserSubmission) SetSubmitter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_submission` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"submitter_id"}),
		strmangle.WhereClause("`", "`", 0, userSubmissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SubmitterID = related.ID
	if o.R == nil {
		o.R = &userSubmissionR{
			Submitter: related,
		}
	} else {
		o.R.Submitter = related
	}

	if related.R == nil {
		related.R = &userR{
			SubmitterUserSubmissions: UserSubmissionSlice{o},
		}
	} else {
		related.R.SubmitterUserSubmissions = append(related.R.SubmitterUserSubmissions, o)
	}

	return nil
}

// SetSubmission of the userSubmission to the related item.
// Sets o.R.Submission to related.
// Adds o to related.R.UserSubmissions.
func (o *UserSubmission) SetSubmission(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Submission) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_submission` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"submission_id"}),
		strmangle.WhereClause("`", "`", 0, userSubmissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SubmissionID = related.ID
	if o.R == nil {
		o.R = &userSubmissionR{
			Submission: related,
		}
	} else {
		o.R.Submission = related
	}

	if related.R == nil {
		related.R = &submissionR{
			UserSubmissions: UserSubmissionSlice{o},
		}
	} else {
		related.R.UserSubmissions = append(related.R.UserSubmissions, o)
	}

	return nil
}

// AddFiles adds the given related objects to the existing relationships
// of the user_submission, optionally inserting them as new records.
// Appends related to o.R.Files.
// Sets related.R.UserSubmissions appropriately.
func (o *UserSubmission) AddFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*File) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `user_submission_has_files` (`user_submission_id`, `file_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &userSubmissionR{
			Files: related,
		}
	} else {
		o.R.Files = append(o.R.Files, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fileR{
				UserSubmissions: UserSubmissionSlice{o},
			}
		} else {
			rel.R.UserSubmissions = append(rel.R.UserSubmissions, o)
		}
	}
	return nil
}

// SetFiles removes all previously related items of the
// user_submission replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UserSubmissions's Files accordingly.
// Replaces o.R.Files with related.
// Sets related.R.UserSubmissions's Files accordingly.
func (o *UserSubmission) SetFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*File) error {
	query := "delete from `user_submission_has_files` where `user_submission_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeFilesFromUserSubmissionsSlice(o, related)
	if o.R != nil {
		o.R.Files = nil
	}

	return o.AddFiles(ctx, exec, insert, related...)
}

// RemoveFiles relationships from objects passed in.
// Removes related items from R.Files (uses pointer comparison, removal does not keep order)
// Sets related.R.UserSubmissions.
func (o *UserSubmission) RemoveFiles(ctx context.Context, exec boil.ContextExecutor, related ...*File) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `user_submission_has_files` where `user_submission_id` = ? and `file_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeFilesFromUserSubmissionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Files {
			if rel != ri {
				continue
			}

			ln := len(o.R.Files)
			if ln > 1 && i < ln-1 {
				o.R.Files[i] = o.R.Files[ln-1]
			}
			o.R.Files = o.R.Files[:ln-1]
			break
		}
	}

	return nil
}

func removeFilesFromUserSubmissionsSlice(o *UserSubmission, related []*File) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.UserSubmissions {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.UserSubmissions)
			if ln > 1 && i < ln-1 {
				rel.R.UserSubmissions[i] = rel.R.UserSubmissions[ln-1]
			}
			rel.R.UserSubmissions = rel.R.UserSubmissions[:ln-1]
			break
		}
	}
}

// UserSubmissions retrieves all the records using an executor.
func UserSubmissions(mods ...qm.QueryMod) userSubmissionQuery {
	mods = append(mods, qm.From("`user_submission`"), qmhelper.WhereIsNull("`user_submission`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_submission`.*"})
	}

	return userSubmissionQuery{q}
}

// FindUserSubmission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserSubmission(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserSubmission, error) {
	userSubmissionObj := &UserSubmission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_submission` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userSubmissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_submission")
	}

	if err = userSubmissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userSubmissionObj, err
	}

	return userSubmissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserSubmission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_submission provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSubmissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userSubmissionInsertCacheMut.RLock()
	cache, cached := userSubmissionInsertCache[key]
	userSubmissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userSubmissionAllColumns,
			userSubmissionColumnsWithDefault,
			userSubmissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userSubmissionType, userSubmissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userSubmissionType, userSubmissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_submission` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_submission` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_submission` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userSubmissionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_submission")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userSubmissionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_submission")
	}

CacheNoHooks:
	if !cached {
		userSubmissionInsertCacheMut.Lock()
		userSubmissionInsertCache[key] = cache
		userSubmissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserSubmission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserSubmission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userSubmissionUpdateCacheMut.RLock()
	cache, cached := userSubmissionUpdateCache[key]
	userSubmissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userSubmissionAllColumns,
			userSubmissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_submission, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_submission` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userSubmissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userSubmissionType, userSubmissionMapping, append(wl, userSubmissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_submission row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_submission")
	}

	if !cached {
		userSubmissionUpdateCacheMut.Lock()
		userSubmissionUpdateCache[key] = cache
		userSubmissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userSubmissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_submission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_submission")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSubmissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSubmissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_submission` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userSubmissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userSubmission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userSubmission")
	}
	return rowsAff, nil
}

var mySQLUserSubmissionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserSubmission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_submission provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSubmissionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserSubmissionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userSubmissionUpsertCacheMut.RLock()
	cache, cached := userSubmissionUpsertCache[key]
	userSubmissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userSubmissionAllColumns,
			userSubmissionColumnsWithDefault,
			userSubmissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userSubmissionAllColumns,
			userSubmissionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_submission, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_submission`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_submission` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userSubmissionType, userSubmissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userSubmissionType, userSubmissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_submission")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userSubmissionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userSubmissionType, userSubmissionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_submission")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_submission")
	}

CacheNoHooks:
	if !cached {
		userSubmissionUpsertCacheMut.Lock()
		userSubmissionUpsertCache[key] = cache
		userSubmissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserSubmission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserSubmission) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserSubmission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userSubmissionPrimaryKeyMapping)
		sql = "DELETE FROM `user_submission` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_submission` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(userSubmissionType, userSubmissionMapping, append(wl, userSubmissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_submission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_submission")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userSubmissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userSubmissionQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_submission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_submission")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSubmissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userSubmissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSubmissionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `user_submission` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userSubmissionPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSubmissionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_submission` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userSubmissionPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userSubmission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_submission")
	}

	if len(userSubmissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserSubmission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserSubmission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSubmissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSubmissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSubmissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_submission`.* FROM `user_submission` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userSubmissionPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserSubmissionSlice")
	}

	*o = slice

	return nil
}

// UserSubmissionExists checks if the UserSubmission row exists.
func UserSubmissionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_submission` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_submission exists")
	}

	return exists, nil
}

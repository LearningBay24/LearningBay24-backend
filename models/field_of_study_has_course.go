// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FieldOfStudyHasCourse is an object representing the database table.
type FieldOfStudyHasCourse struct {
	FieldOfStudyID int `boil:"field_of_study_id" json:"field_of_study_id" toml:"field_of_study_id" yaml:"field_of_study_id"`
	CourseID       int `boil:"course_id" json:"course_id" toml:"course_id" yaml:"course_id"`
	// The semester the course is supposed to take place in in the field of study with the id field_of_study_id.
	Semester int `boil:"semester" json:"semester" toml:"semester" yaml:"semester"`

	R *fieldOfStudyHasCourseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fieldOfStudyHasCourseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FieldOfStudyHasCourseColumns = struct {
	FieldOfStudyID string
	CourseID       string
	Semester       string
}{
	FieldOfStudyID: "field_of_study_id",
	CourseID:       "course_id",
	Semester:       "semester",
}

var FieldOfStudyHasCourseTableColumns = struct {
	FieldOfStudyID string
	CourseID       string
	Semester       string
}{
	FieldOfStudyID: "field_of_study_has_course.field_of_study_id",
	CourseID:       "field_of_study_has_course.course_id",
	Semester:       "field_of_study_has_course.semester",
}

// Generated where

var FieldOfStudyHasCourseWhere = struct {
	FieldOfStudyID whereHelperint
	CourseID       whereHelperint
	Semester       whereHelperint
}{
	FieldOfStudyID: whereHelperint{field: "`field_of_study_has_course`.`field_of_study_id`"},
	CourseID:       whereHelperint{field: "`field_of_study_has_course`.`course_id`"},
	Semester:       whereHelperint{field: "`field_of_study_has_course`.`semester`"},
}

// FieldOfStudyHasCourseRels is where relationship names are stored.
var FieldOfStudyHasCourseRels = struct {
	Course       string
	FieldOfStudy string
}{
	Course:       "Course",
	FieldOfStudy: "FieldOfStudy",
}

// fieldOfStudyHasCourseR is where relationships are stored.
type fieldOfStudyHasCourseR struct {
	Course       *Course       `boil:"Course" json:"Course" toml:"Course" yaml:"Course"`
	FieldOfStudy *FieldOfStudy `boil:"FieldOfStudy" json:"FieldOfStudy" toml:"FieldOfStudy" yaml:"FieldOfStudy"`
}

// NewStruct creates a new relationship struct
func (*fieldOfStudyHasCourseR) NewStruct() *fieldOfStudyHasCourseR {
	return &fieldOfStudyHasCourseR{}
}

func (r *fieldOfStudyHasCourseR) GetCourse() *Course {
	if r == nil {
		return nil
	}
	return r.Course
}

func (r *fieldOfStudyHasCourseR) GetFieldOfStudy() *FieldOfStudy {
	if r == nil {
		return nil
	}
	return r.FieldOfStudy
}

// fieldOfStudyHasCourseL is where Load methods for each relationship are stored.
type fieldOfStudyHasCourseL struct{}

var (
	fieldOfStudyHasCourseAllColumns            = []string{"field_of_study_id", "course_id", "semester"}
	fieldOfStudyHasCourseColumnsWithoutDefault = []string{"field_of_study_id", "course_id", "semester"}
	fieldOfStudyHasCourseColumnsWithDefault    = []string{}
	fieldOfStudyHasCoursePrimaryKeyColumns     = []string{"field_of_study_id", "course_id"}
	fieldOfStudyHasCourseGeneratedColumns      = []string{}
)

type (
	// FieldOfStudyHasCourseSlice is an alias for a slice of pointers to FieldOfStudyHasCourse.
	// This should almost always be used instead of []FieldOfStudyHasCourse.
	FieldOfStudyHasCourseSlice []*FieldOfStudyHasCourse
	// FieldOfStudyHasCourseHook is the signature for custom FieldOfStudyHasCourse hook methods
	FieldOfStudyHasCourseHook func(context.Context, boil.ContextExecutor, *FieldOfStudyHasCourse) error

	fieldOfStudyHasCourseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fieldOfStudyHasCourseType                 = reflect.TypeOf(&FieldOfStudyHasCourse{})
	fieldOfStudyHasCourseMapping              = queries.MakeStructMapping(fieldOfStudyHasCourseType)
	fieldOfStudyHasCoursePrimaryKeyMapping, _ = queries.BindMapping(fieldOfStudyHasCourseType, fieldOfStudyHasCourseMapping, fieldOfStudyHasCoursePrimaryKeyColumns)
	fieldOfStudyHasCourseInsertCacheMut       sync.RWMutex
	fieldOfStudyHasCourseInsertCache          = make(map[string]insertCache)
	fieldOfStudyHasCourseUpdateCacheMut       sync.RWMutex
	fieldOfStudyHasCourseUpdateCache          = make(map[string]updateCache)
	fieldOfStudyHasCourseUpsertCacheMut       sync.RWMutex
	fieldOfStudyHasCourseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fieldOfStudyHasCourseAfterSelectHooks []FieldOfStudyHasCourseHook

var fieldOfStudyHasCourseBeforeInsertHooks []FieldOfStudyHasCourseHook
var fieldOfStudyHasCourseAfterInsertHooks []FieldOfStudyHasCourseHook

var fieldOfStudyHasCourseBeforeUpdateHooks []FieldOfStudyHasCourseHook
var fieldOfStudyHasCourseAfterUpdateHooks []FieldOfStudyHasCourseHook

var fieldOfStudyHasCourseBeforeDeleteHooks []FieldOfStudyHasCourseHook
var fieldOfStudyHasCourseAfterDeleteHooks []FieldOfStudyHasCourseHook

var fieldOfStudyHasCourseBeforeUpsertHooks []FieldOfStudyHasCourseHook
var fieldOfStudyHasCourseAfterUpsertHooks []FieldOfStudyHasCourseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FieldOfStudyHasCourse) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyHasCourseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FieldOfStudyHasCourse) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyHasCourseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FieldOfStudyHasCourse) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyHasCourseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FieldOfStudyHasCourse) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyHasCourseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FieldOfStudyHasCourse) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyHasCourseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FieldOfStudyHasCourse) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyHasCourseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FieldOfStudyHasCourse) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyHasCourseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FieldOfStudyHasCourse) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyHasCourseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FieldOfStudyHasCourse) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyHasCourseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFieldOfStudyHasCourseHook registers your hook function for all future operations.
func AddFieldOfStudyHasCourseHook(hookPoint boil.HookPoint, fieldOfStudyHasCourseHook FieldOfStudyHasCourseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fieldOfStudyHasCourseAfterSelectHooks = append(fieldOfStudyHasCourseAfterSelectHooks, fieldOfStudyHasCourseHook)
	case boil.BeforeInsertHook:
		fieldOfStudyHasCourseBeforeInsertHooks = append(fieldOfStudyHasCourseBeforeInsertHooks, fieldOfStudyHasCourseHook)
	case boil.AfterInsertHook:
		fieldOfStudyHasCourseAfterInsertHooks = append(fieldOfStudyHasCourseAfterInsertHooks, fieldOfStudyHasCourseHook)
	case boil.BeforeUpdateHook:
		fieldOfStudyHasCourseBeforeUpdateHooks = append(fieldOfStudyHasCourseBeforeUpdateHooks, fieldOfStudyHasCourseHook)
	case boil.AfterUpdateHook:
		fieldOfStudyHasCourseAfterUpdateHooks = append(fieldOfStudyHasCourseAfterUpdateHooks, fieldOfStudyHasCourseHook)
	case boil.BeforeDeleteHook:
		fieldOfStudyHasCourseBeforeDeleteHooks = append(fieldOfStudyHasCourseBeforeDeleteHooks, fieldOfStudyHasCourseHook)
	case boil.AfterDeleteHook:
		fieldOfStudyHasCourseAfterDeleteHooks = append(fieldOfStudyHasCourseAfterDeleteHooks, fieldOfStudyHasCourseHook)
	case boil.BeforeUpsertHook:
		fieldOfStudyHasCourseBeforeUpsertHooks = append(fieldOfStudyHasCourseBeforeUpsertHooks, fieldOfStudyHasCourseHook)
	case boil.AfterUpsertHook:
		fieldOfStudyHasCourseAfterUpsertHooks = append(fieldOfStudyHasCourseAfterUpsertHooks, fieldOfStudyHasCourseHook)
	}
}

// One returns a single fieldOfStudyHasCourse record from the query.
func (q fieldOfStudyHasCourseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FieldOfStudyHasCourse, error) {
	o := &FieldOfStudyHasCourse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for field_of_study_has_course")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FieldOfStudyHasCourse records from the query.
func (q fieldOfStudyHasCourseQuery) All(ctx context.Context, exec boil.ContextExecutor) (FieldOfStudyHasCourseSlice, error) {
	var o []*FieldOfStudyHasCourse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FieldOfStudyHasCourse slice")
	}

	if len(fieldOfStudyHasCourseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FieldOfStudyHasCourse records in the query.
func (q fieldOfStudyHasCourseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count field_of_study_has_course rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fieldOfStudyHasCourseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if field_of_study_has_course exists")
	}

	return count > 0, nil
}

// Course pointed to by the foreign key.
func (o *FieldOfStudyHasCourse) Course(mods ...qm.QueryMod) courseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CourseID),
	}

	queryMods = append(queryMods, mods...)

	return Courses(queryMods...)
}

// FieldOfStudy pointed to by the foreign key.
func (o *FieldOfStudyHasCourse) FieldOfStudy(mods ...qm.QueryMod) fieldOfStudyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.FieldOfStudyID),
	}

	queryMods = append(queryMods, mods...)

	return FieldOfStudies(queryMods...)
}

// LoadCourse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fieldOfStudyHasCourseL) LoadCourse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFieldOfStudyHasCourse interface{}, mods queries.Applicator) error {
	var slice []*FieldOfStudyHasCourse
	var object *FieldOfStudyHasCourse

	if singular {
		object = maybeFieldOfStudyHasCourse.(*FieldOfStudyHasCourse)
	} else {
		slice = *maybeFieldOfStudyHasCourse.(*[]*FieldOfStudyHasCourse)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fieldOfStudyHasCourseR{}
		}
		args = append(args, object.CourseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fieldOfStudyHasCourseR{}
			}

			for _, a := range args {
				if a == obj.CourseID {
					continue Outer
				}
			}

			args = append(args, obj.CourseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`course`),
		qm.WhereIn(`course.id in ?`, args...),
		qmhelper.WhereIsNull(`course.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Course")
	}

	var resultSlice []*Course
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for course")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course")
	}

	if len(fieldOfStudyHasCourseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Course = foreign
		if foreign.R == nil {
			foreign.R = &courseR{}
		}
		foreign.R.FieldOfStudyHasCourses = append(foreign.R.FieldOfStudyHasCourses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CourseID == foreign.ID {
				local.R.Course = foreign
				if foreign.R == nil {
					foreign.R = &courseR{}
				}
				foreign.R.FieldOfStudyHasCourses = append(foreign.R.FieldOfStudyHasCourses, local)
				break
			}
		}
	}

	return nil
}

// LoadFieldOfStudy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fieldOfStudyHasCourseL) LoadFieldOfStudy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFieldOfStudyHasCourse interface{}, mods queries.Applicator) error {
	var slice []*FieldOfStudyHasCourse
	var object *FieldOfStudyHasCourse

	if singular {
		object = maybeFieldOfStudyHasCourse.(*FieldOfStudyHasCourse)
	} else {
		slice = *maybeFieldOfStudyHasCourse.(*[]*FieldOfStudyHasCourse)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fieldOfStudyHasCourseR{}
		}
		args = append(args, object.FieldOfStudyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fieldOfStudyHasCourseR{}
			}

			for _, a := range args {
				if a == obj.FieldOfStudyID {
					continue Outer
				}
			}

			args = append(args, obj.FieldOfStudyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`field_of_study`),
		qm.WhereIn(`field_of_study.id in ?`, args...),
		qmhelper.WhereIsNull(`field_of_study.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FieldOfStudy")
	}

	var resultSlice []*FieldOfStudy
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FieldOfStudy")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for field_of_study")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for field_of_study")
	}

	if len(fieldOfStudyHasCourseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FieldOfStudy = foreign
		if foreign.R == nil {
			foreign.R = &fieldOfStudyR{}
		}
		foreign.R.FieldOfStudyHasCourses = append(foreign.R.FieldOfStudyHasCourses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FieldOfStudyID == foreign.ID {
				local.R.FieldOfStudy = foreign
				if foreign.R == nil {
					foreign.R = &fieldOfStudyR{}
				}
				foreign.R.FieldOfStudyHasCourses = append(foreign.R.FieldOfStudyHasCourses, local)
				break
			}
		}
	}

	return nil
}

// SetCourse of the fieldOfStudyHasCourse to the related item.
// Sets o.R.Course to related.
// Adds o to related.R.FieldOfStudyHasCourses.
func (o *FieldOfStudyHasCourse) SetCourse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Course) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `field_of_study_has_course` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
		strmangle.WhereClause("`", "`", 0, fieldOfStudyHasCoursePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.FieldOfStudyID, o.CourseID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CourseID = related.ID
	if o.R == nil {
		o.R = &fieldOfStudyHasCourseR{
			Course: related,
		}
	} else {
		o.R.Course = related
	}

	if related.R == nil {
		related.R = &courseR{
			FieldOfStudyHasCourses: FieldOfStudyHasCourseSlice{o},
		}
	} else {
		related.R.FieldOfStudyHasCourses = append(related.R.FieldOfStudyHasCourses, o)
	}

	return nil
}

// SetFieldOfStudy of the fieldOfStudyHasCourse to the related item.
// Sets o.R.FieldOfStudy to related.
// Adds o to related.R.FieldOfStudyHasCourses.
func (o *FieldOfStudyHasCourse) SetFieldOfStudy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FieldOfStudy) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `field_of_study_has_course` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"field_of_study_id"}),
		strmangle.WhereClause("`", "`", 0, fieldOfStudyHasCoursePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.FieldOfStudyID, o.CourseID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FieldOfStudyID = related.ID
	if o.R == nil {
		o.R = &fieldOfStudyHasCourseR{
			FieldOfStudy: related,
		}
	} else {
		o.R.FieldOfStudy = related
	}

	if related.R == nil {
		related.R = &fieldOfStudyR{
			FieldOfStudyHasCourses: FieldOfStudyHasCourseSlice{o},
		}
	} else {
		related.R.FieldOfStudyHasCourses = append(related.R.FieldOfStudyHasCourses, o)
	}

	return nil
}

// FieldOfStudyHasCourses retrieves all the records using an executor.
func FieldOfStudyHasCourses(mods ...qm.QueryMod) fieldOfStudyHasCourseQuery {
	mods = append(mods, qm.From("`field_of_study_has_course`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`field_of_study_has_course`.*"})
	}

	return fieldOfStudyHasCourseQuery{q}
}

// FindFieldOfStudyHasCourse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFieldOfStudyHasCourse(ctx context.Context, exec boil.ContextExecutor, fieldOfStudyID int, courseID int, selectCols ...string) (*FieldOfStudyHasCourse, error) {
	fieldOfStudyHasCourseObj := &FieldOfStudyHasCourse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `field_of_study_has_course` where `field_of_study_id`=? AND `course_id`=?", sel,
	)

	q := queries.Raw(query, fieldOfStudyID, courseID)

	err := q.Bind(ctx, exec, fieldOfStudyHasCourseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from field_of_study_has_course")
	}

	if err = fieldOfStudyHasCourseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return fieldOfStudyHasCourseObj, err
	}

	return fieldOfStudyHasCourseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FieldOfStudyHasCourse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no field_of_study_has_course provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fieldOfStudyHasCourseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fieldOfStudyHasCourseInsertCacheMut.RLock()
	cache, cached := fieldOfStudyHasCourseInsertCache[key]
	fieldOfStudyHasCourseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fieldOfStudyHasCourseAllColumns,
			fieldOfStudyHasCourseColumnsWithDefault,
			fieldOfStudyHasCourseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fieldOfStudyHasCourseType, fieldOfStudyHasCourseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fieldOfStudyHasCourseType, fieldOfStudyHasCourseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `field_of_study_has_course` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `field_of_study_has_course` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `field_of_study_has_course` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, fieldOfStudyHasCoursePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into field_of_study_has_course")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FieldOfStudyID,
		o.CourseID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for field_of_study_has_course")
	}

CacheNoHooks:
	if !cached {
		fieldOfStudyHasCourseInsertCacheMut.Lock()
		fieldOfStudyHasCourseInsertCache[key] = cache
		fieldOfStudyHasCourseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FieldOfStudyHasCourse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FieldOfStudyHasCourse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fieldOfStudyHasCourseUpdateCacheMut.RLock()
	cache, cached := fieldOfStudyHasCourseUpdateCache[key]
	fieldOfStudyHasCourseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fieldOfStudyHasCourseAllColumns,
			fieldOfStudyHasCoursePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update field_of_study_has_course, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `field_of_study_has_course` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, fieldOfStudyHasCoursePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fieldOfStudyHasCourseType, fieldOfStudyHasCourseMapping, append(wl, fieldOfStudyHasCoursePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update field_of_study_has_course row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for field_of_study_has_course")
	}

	if !cached {
		fieldOfStudyHasCourseUpdateCacheMut.Lock()
		fieldOfStudyHasCourseUpdateCache[key] = cache
		fieldOfStudyHasCourseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fieldOfStudyHasCourseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for field_of_study_has_course")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for field_of_study_has_course")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FieldOfStudyHasCourseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fieldOfStudyHasCoursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `field_of_study_has_course` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fieldOfStudyHasCoursePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fieldOfStudyHasCourse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fieldOfStudyHasCourse")
	}
	return rowsAff, nil
}

var mySQLFieldOfStudyHasCourseUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FieldOfStudyHasCourse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no field_of_study_has_course provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fieldOfStudyHasCourseColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFieldOfStudyHasCourseUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fieldOfStudyHasCourseUpsertCacheMut.RLock()
	cache, cached := fieldOfStudyHasCourseUpsertCache[key]
	fieldOfStudyHasCourseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fieldOfStudyHasCourseAllColumns,
			fieldOfStudyHasCourseColumnsWithDefault,
			fieldOfStudyHasCourseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fieldOfStudyHasCourseAllColumns,
			fieldOfStudyHasCoursePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert field_of_study_has_course, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`field_of_study_has_course`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `field_of_study_has_course` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(fieldOfStudyHasCourseType, fieldOfStudyHasCourseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fieldOfStudyHasCourseType, fieldOfStudyHasCourseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for field_of_study_has_course")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(fieldOfStudyHasCourseType, fieldOfStudyHasCourseMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for field_of_study_has_course")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for field_of_study_has_course")
	}

CacheNoHooks:
	if !cached {
		fieldOfStudyHasCourseUpsertCacheMut.Lock()
		fieldOfStudyHasCourseUpsertCache[key] = cache
		fieldOfStudyHasCourseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FieldOfStudyHasCourse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FieldOfStudyHasCourse) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FieldOfStudyHasCourse provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fieldOfStudyHasCoursePrimaryKeyMapping)
	sql := "DELETE FROM `field_of_study_has_course` WHERE `field_of_study_id`=? AND `course_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from field_of_study_has_course")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for field_of_study_has_course")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fieldOfStudyHasCourseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fieldOfStudyHasCourseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from field_of_study_has_course")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for field_of_study_has_course")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FieldOfStudyHasCourseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fieldOfStudyHasCourseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fieldOfStudyHasCoursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `field_of_study_has_course` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fieldOfStudyHasCoursePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fieldOfStudyHasCourse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for field_of_study_has_course")
	}

	if len(fieldOfStudyHasCourseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FieldOfStudyHasCourse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFieldOfStudyHasCourse(ctx, exec, o.FieldOfStudyID, o.CourseID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FieldOfStudyHasCourseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FieldOfStudyHasCourseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fieldOfStudyHasCoursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `field_of_study_has_course`.* FROM `field_of_study_has_course` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fieldOfStudyHasCoursePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FieldOfStudyHasCourseSlice")
	}

	*o = slice

	return nil
}

// FieldOfStudyHasCourseExists checks if the FieldOfStudyHasCourse row exists.
func FieldOfStudyHasCourseExists(ctx context.Context, exec boil.ContextExecutor, fieldOfStudyID int, courseID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `field_of_study_has_course` where `field_of_study_id`=? AND `course_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fieldOfStudyID, courseID)
	}
	row := exec.QueryRowContext(ctx, sql, fieldOfStudyID, courseID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if field_of_study_has_course exists")
	}

	return exists, nil
}

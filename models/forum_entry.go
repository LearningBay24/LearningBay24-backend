// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ForumEntry is an object representing the database table.
type ForumEntry struct {
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// The subject of the forum entry.
	Subject string `boil:"subject" json:"subject" toml:"subject" yaml:"subject"`
	// The content of the forum entry.
	Content string `boil:"content" json:"content" toml:"content" yaml:"content"`
	// New posts have a value of `NULL`, whereas replies to a top-level-post refer to the top-level-post with this field.
	InReplyTo null.Int `boil:"in_reply_to" json:"in_reply_to,omitempty" toml:"in_reply_to" yaml:"in_reply_to,omitempty"`
	// The author that created this entry.
	AuthorID int `boil:"author_id" json:"author_id" toml:"author_id" yaml:"author_id"`
	// The forum this entry belongs to.
	ForumID int `boil:"forum_id" json:"forum_id" toml:"forum_id" yaml:"forum_id"`
	// When this entry was created.
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *forumEntryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L forumEntryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ForumEntryColumns = struct {
	ID        string
	Subject   string
	Content   string
	InReplyTo string
	AuthorID  string
	ForumID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Subject:   "subject",
	Content:   "content",
	InReplyTo: "in_reply_to",
	AuthorID:  "author_id",
	ForumID:   "forum_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var ForumEntryTableColumns = struct {
	ID        string
	Subject   string
	Content   string
	InReplyTo string
	AuthorID  string
	ForumID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "forum_entry.id",
	Subject:   "forum_entry.subject",
	Content:   "forum_entry.content",
	InReplyTo: "forum_entry.in_reply_to",
	AuthorID:  "forum_entry.author_id",
	ForumID:   "forum_entry.forum_id",
	CreatedAt: "forum_entry.created_at",
	UpdatedAt: "forum_entry.updated_at",
	DeletedAt: "forum_entry.deleted_at",
}

// Generated where

var ForumEntryWhere = struct {
	ID        whereHelperint
	Subject   whereHelperstring
	Content   whereHelperstring
	InReplyTo whereHelpernull_Int
	AuthorID  whereHelperint
	ForumID   whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "`forum_entry`.`id`"},
	Subject:   whereHelperstring{field: "`forum_entry`.`subject`"},
	Content:   whereHelperstring{field: "`forum_entry`.`content`"},
	InReplyTo: whereHelpernull_Int{field: "`forum_entry`.`in_reply_to`"},
	AuthorID:  whereHelperint{field: "`forum_entry`.`author_id`"},
	ForumID:   whereHelperint{field: "`forum_entry`.`forum_id`"},
	CreatedAt: whereHelpertime_Time{field: "`forum_entry`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`forum_entry`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`forum_entry`.`deleted_at`"},
}

// ForumEntryRels is where relationship names are stored.
var ForumEntryRels = struct {
	Forum                 string
	InReplyToForumEntry   string
	Author                string
	InReplyToForumEntries string
}{
	Forum:                 "Forum",
	InReplyToForumEntry:   "InReplyToForumEntry",
	Author:                "Author",
	InReplyToForumEntries: "InReplyToForumEntries",
}

// forumEntryR is where relationships are stored.
type forumEntryR struct {
	Forum                 *Forum          `boil:"Forum" json:"Forum" toml:"Forum" yaml:"Forum"`
	InReplyToForumEntry   *ForumEntry     `boil:"InReplyToForumEntry" json:"InReplyToForumEntry" toml:"InReplyToForumEntry" yaml:"InReplyToForumEntry"`
	Author                *User           `boil:"Author" json:"Author" toml:"Author" yaml:"Author"`
	InReplyToForumEntries ForumEntrySlice `boil:"InReplyToForumEntries" json:"InReplyToForumEntries" toml:"InReplyToForumEntries" yaml:"InReplyToForumEntries"`
}

// NewStruct creates a new relationship struct
func (*forumEntryR) NewStruct() *forumEntryR {
	return &forumEntryR{}
}

func (r *forumEntryR) GetForum() *Forum {
	if r == nil {
		return nil
	}
	return r.Forum
}

func (r *forumEntryR) GetInReplyToForumEntry() *ForumEntry {
	if r == nil {
		return nil
	}
	return r.InReplyToForumEntry
}

func (r *forumEntryR) GetAuthor() *User {
	if r == nil {
		return nil
	}
	return r.Author
}

func (r *forumEntryR) GetInReplyToForumEntries() ForumEntrySlice {
	if r == nil {
		return nil
	}
	return r.InReplyToForumEntries
}

// forumEntryL is where Load methods for each relationship are stored.
type forumEntryL struct{}

var (
	forumEntryAllColumns            = []string{"id", "subject", "content", "in_reply_to", "author_id", "forum_id", "created_at", "updated_at", "deleted_at"}
	forumEntryColumnsWithoutDefault = []string{"subject", "content", "in_reply_to", "author_id", "forum_id", "updated_at", "deleted_at"}
	forumEntryColumnsWithDefault    = []string{"id", "created_at"}
	forumEntryPrimaryKeyColumns     = []string{"id"}
	forumEntryGeneratedColumns      = []string{}
)

type (
	// ForumEntrySlice is an alias for a slice of pointers to ForumEntry.
	// This should almost always be used instead of []ForumEntry.
	ForumEntrySlice []*ForumEntry
	// ForumEntryHook is the signature for custom ForumEntry hook methods
	ForumEntryHook func(context.Context, boil.ContextExecutor, *ForumEntry) error

	forumEntryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	forumEntryType                 = reflect.TypeOf(&ForumEntry{})
	forumEntryMapping              = queries.MakeStructMapping(forumEntryType)
	forumEntryPrimaryKeyMapping, _ = queries.BindMapping(forumEntryType, forumEntryMapping, forumEntryPrimaryKeyColumns)
	forumEntryInsertCacheMut       sync.RWMutex
	forumEntryInsertCache          = make(map[string]insertCache)
	forumEntryUpdateCacheMut       sync.RWMutex
	forumEntryUpdateCache          = make(map[string]updateCache)
	forumEntryUpsertCacheMut       sync.RWMutex
	forumEntryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var forumEntryAfterSelectHooks []ForumEntryHook

var forumEntryBeforeInsertHooks []ForumEntryHook
var forumEntryAfterInsertHooks []ForumEntryHook

var forumEntryBeforeUpdateHooks []ForumEntryHook
var forumEntryAfterUpdateHooks []ForumEntryHook

var forumEntryBeforeDeleteHooks []ForumEntryHook
var forumEntryAfterDeleteHooks []ForumEntryHook

var forumEntryBeforeUpsertHooks []ForumEntryHook
var forumEntryAfterUpsertHooks []ForumEntryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ForumEntry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forumEntryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ForumEntry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forumEntryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ForumEntry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forumEntryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ForumEntry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forumEntryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ForumEntry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forumEntryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ForumEntry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forumEntryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ForumEntry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forumEntryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ForumEntry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forumEntryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ForumEntry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range forumEntryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddForumEntryHook registers your hook function for all future operations.
func AddForumEntryHook(hookPoint boil.HookPoint, forumEntryHook ForumEntryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		forumEntryAfterSelectHooks = append(forumEntryAfterSelectHooks, forumEntryHook)
	case boil.BeforeInsertHook:
		forumEntryBeforeInsertHooks = append(forumEntryBeforeInsertHooks, forumEntryHook)
	case boil.AfterInsertHook:
		forumEntryAfterInsertHooks = append(forumEntryAfterInsertHooks, forumEntryHook)
	case boil.BeforeUpdateHook:
		forumEntryBeforeUpdateHooks = append(forumEntryBeforeUpdateHooks, forumEntryHook)
	case boil.AfterUpdateHook:
		forumEntryAfterUpdateHooks = append(forumEntryAfterUpdateHooks, forumEntryHook)
	case boil.BeforeDeleteHook:
		forumEntryBeforeDeleteHooks = append(forumEntryBeforeDeleteHooks, forumEntryHook)
	case boil.AfterDeleteHook:
		forumEntryAfterDeleteHooks = append(forumEntryAfterDeleteHooks, forumEntryHook)
	case boil.BeforeUpsertHook:
		forumEntryBeforeUpsertHooks = append(forumEntryBeforeUpsertHooks, forumEntryHook)
	case boil.AfterUpsertHook:
		forumEntryAfterUpsertHooks = append(forumEntryAfterUpsertHooks, forumEntryHook)
	}
}

// One returns a single forumEntry record from the query.
func (q forumEntryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ForumEntry, error) {
	o := &ForumEntry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for forum_entry")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ForumEntry records from the query.
func (q forumEntryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ForumEntrySlice, error) {
	var o []*ForumEntry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ForumEntry slice")
	}

	if len(forumEntryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ForumEntry records in the query.
func (q forumEntryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count forum_entry rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q forumEntryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if forum_entry exists")
	}

	return count > 0, nil
}

// Forum pointed to by the foreign key.
func (o *ForumEntry) Forum(mods ...qm.QueryMod) forumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ForumID),
	}

	queryMods = append(queryMods, mods...)

	return Forums(queryMods...)
}

// InReplyToForumEntry pointed to by the foreign key.
func (o *ForumEntry) InReplyToForumEntry(mods ...qm.QueryMod) forumEntryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.InReplyTo),
	}

	queryMods = append(queryMods, mods...)

	return ForumEntries(queryMods...)
}

// Author pointed to by the foreign key.
func (o *ForumEntry) Author(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.AuthorID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// InReplyToForumEntries retrieves all the forum_entry's ForumEntries with an executor via in_reply_to column.
func (o *ForumEntry) InReplyToForumEntries(mods ...qm.QueryMod) forumEntryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`forum_entry`.`in_reply_to`=?", o.ID),
	)

	return ForumEntries(queryMods...)
}

// LoadForum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (forumEntryL) LoadForum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeForumEntry interface{}, mods queries.Applicator) error {
	var slice []*ForumEntry
	var object *ForumEntry

	if singular {
		object = maybeForumEntry.(*ForumEntry)
	} else {
		slice = *maybeForumEntry.(*[]*ForumEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &forumEntryR{}
		}
		args = append(args, object.ForumID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &forumEntryR{}
			}

			for _, a := range args {
				if a == obj.ForumID {
					continue Outer
				}
			}

			args = append(args, obj.ForumID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`forum`),
		qm.WhereIn(`forum.id in ?`, args...),
		qmhelper.WhereIsNull(`forum.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Forum")
	}

	var resultSlice []*Forum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Forum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for forum")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for forum")
	}

	if len(forumEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Forum = foreign
		if foreign.R == nil {
			foreign.R = &forumR{}
		}
		foreign.R.ForumEntries = append(foreign.R.ForumEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ForumID == foreign.ID {
				local.R.Forum = foreign
				if foreign.R == nil {
					foreign.R = &forumR{}
				}
				foreign.R.ForumEntries = append(foreign.R.ForumEntries, local)
				break
			}
		}
	}

	return nil
}

// LoadInReplyToForumEntry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (forumEntryL) LoadInReplyToForumEntry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeForumEntry interface{}, mods queries.Applicator) error {
	var slice []*ForumEntry
	var object *ForumEntry

	if singular {
		object = maybeForumEntry.(*ForumEntry)
	} else {
		slice = *maybeForumEntry.(*[]*ForumEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &forumEntryR{}
		}
		if !queries.IsNil(object.InReplyTo) {
			args = append(args, object.InReplyTo)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &forumEntryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InReplyTo) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.InReplyTo) {
				args = append(args, obj.InReplyTo)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`forum_entry`),
		qm.WhereIn(`forum_entry.id in ?`, args...),
		qmhelper.WhereIsNull(`forum_entry.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ForumEntry")
	}

	var resultSlice []*ForumEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ForumEntry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for forum_entry")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for forum_entry")
	}

	if len(forumEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InReplyToForumEntry = foreign
		if foreign.R == nil {
			foreign.R = &forumEntryR{}
		}
		foreign.R.InReplyToForumEntries = append(foreign.R.InReplyToForumEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InReplyTo, foreign.ID) {
				local.R.InReplyToForumEntry = foreign
				if foreign.R == nil {
					foreign.R = &forumEntryR{}
				}
				foreign.R.InReplyToForumEntries = append(foreign.R.InReplyToForumEntries, local)
				break
			}
		}
	}

	return nil
}

// LoadAuthor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (forumEntryL) LoadAuthor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeForumEntry interface{}, mods queries.Applicator) error {
	var slice []*ForumEntry
	var object *ForumEntry

	if singular {
		object = maybeForumEntry.(*ForumEntry)
	} else {
		slice = *maybeForumEntry.(*[]*ForumEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &forumEntryR{}
		}
		args = append(args, object.AuthorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &forumEntryR{}
			}

			for _, a := range args {
				if a == obj.AuthorID {
					continue Outer
				}
			}

			args = append(args, obj.AuthorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(forumEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Author = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AuthorForumEntries = append(foreign.R.AuthorForumEntries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuthorID == foreign.ID {
				local.R.Author = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AuthorForumEntries = append(foreign.R.AuthorForumEntries, local)
				break
			}
		}
	}

	return nil
}

// LoadInReplyToForumEntries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (forumEntryL) LoadInReplyToForumEntries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeForumEntry interface{}, mods queries.Applicator) error {
	var slice []*ForumEntry
	var object *ForumEntry

	if singular {
		object = maybeForumEntry.(*ForumEntry)
	} else {
		slice = *maybeForumEntry.(*[]*ForumEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &forumEntryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &forumEntryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`forum_entry`),
		qm.WhereIn(`forum_entry.in_reply_to in ?`, args...),
		qmhelper.WhereIsNull(`forum_entry.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load forum_entry")
	}

	var resultSlice []*ForumEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice forum_entry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on forum_entry")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for forum_entry")
	}

	if len(forumEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InReplyToForumEntries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &forumEntryR{}
			}
			foreign.R.InReplyToForumEntry = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.InReplyTo) {
				local.R.InReplyToForumEntries = append(local.R.InReplyToForumEntries, foreign)
				if foreign.R == nil {
					foreign.R = &forumEntryR{}
				}
				foreign.R.InReplyToForumEntry = local
				break
			}
		}
	}

	return nil
}

// SetForum of the forumEntry to the related item.
// Sets o.R.Forum to related.
// Adds o to related.R.ForumEntries.
func (o *ForumEntry) SetForum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Forum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `forum_entry` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"forum_id"}),
		strmangle.WhereClause("`", "`", 0, forumEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ForumID = related.ID
	if o.R == nil {
		o.R = &forumEntryR{
			Forum: related,
		}
	} else {
		o.R.Forum = related
	}

	if related.R == nil {
		related.R = &forumR{
			ForumEntries: ForumEntrySlice{o},
		}
	} else {
		related.R.ForumEntries = append(related.R.ForumEntries, o)
	}

	return nil
}

// SetInReplyToForumEntry of the forumEntry to the related item.
// Sets o.R.InReplyToForumEntry to related.
// Adds o to related.R.InReplyToForumEntries.
func (o *ForumEntry) SetInReplyToForumEntry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ForumEntry) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `forum_entry` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"in_reply_to"}),
		strmangle.WhereClause("`", "`", 0, forumEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InReplyTo, related.ID)
	if o.R == nil {
		o.R = &forumEntryR{
			InReplyToForumEntry: related,
		}
	} else {
		o.R.InReplyToForumEntry = related
	}

	if related.R == nil {
		related.R = &forumEntryR{
			InReplyToForumEntries: ForumEntrySlice{o},
		}
	} else {
		related.R.InReplyToForumEntries = append(related.R.InReplyToForumEntries, o)
	}

	return nil
}

// RemoveInReplyToForumEntry relationship.
// Sets o.R.InReplyToForumEntry to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ForumEntry) RemoveInReplyToForumEntry(ctx context.Context, exec boil.ContextExecutor, related *ForumEntry) error {
	var err error

	queries.SetScanner(&o.InReplyTo, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("in_reply_to")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InReplyToForumEntry = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.InReplyToForumEntries {
		if queries.Equal(o.InReplyTo, ri.InReplyTo) {
			continue
		}

		ln := len(related.R.InReplyToForumEntries)
		if ln > 1 && i < ln-1 {
			related.R.InReplyToForumEntries[i] = related.R.InReplyToForumEntries[ln-1]
		}
		related.R.InReplyToForumEntries = related.R.InReplyToForumEntries[:ln-1]
		break
	}
	return nil
}

// SetAuthor of the forumEntry to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorForumEntries.
func (o *ForumEntry) SetAuthor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `forum_entry` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"author_id"}),
		strmangle.WhereClause("`", "`", 0, forumEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuthorID = related.ID
	if o.R == nil {
		o.R = &forumEntryR{
			Author: related,
		}
	} else {
		o.R.Author = related
	}

	if related.R == nil {
		related.R = &userR{
			AuthorForumEntries: ForumEntrySlice{o},
		}
	} else {
		related.R.AuthorForumEntries = append(related.R.AuthorForumEntries, o)
	}

	return nil
}

// AddInReplyToForumEntries adds the given related objects to the existing relationships
// of the forum_entry, optionally inserting them as new records.
// Appends related to o.R.InReplyToForumEntries.
// Sets related.R.InReplyToForumEntry appropriately.
func (o *ForumEntry) AddInReplyToForumEntries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ForumEntry) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InReplyTo, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `forum_entry` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"in_reply_to"}),
				strmangle.WhereClause("`", "`", 0, forumEntryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InReplyTo, o.ID)
		}
	}

	if o.R == nil {
		o.R = &forumEntryR{
			InReplyToForumEntries: related,
		}
	} else {
		o.R.InReplyToForumEntries = append(o.R.InReplyToForumEntries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &forumEntryR{
				InReplyToForumEntry: o,
			}
		} else {
			rel.R.InReplyToForumEntry = o
		}
	}
	return nil
}

// SetInReplyToForumEntries removes all previously related items of the
// forum_entry replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InReplyToForumEntry's InReplyToForumEntries accordingly.
// Replaces o.R.InReplyToForumEntries with related.
// Sets related.R.InReplyToForumEntry's InReplyToForumEntries accordingly.
func (o *ForumEntry) SetInReplyToForumEntries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ForumEntry) error {
	query := "update `forum_entry` set `in_reply_to` = null where `in_reply_to` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.InReplyToForumEntries {
			queries.SetScanner(&rel.InReplyTo, nil)
			if rel.R == nil {
				continue
			}

			rel.R.InReplyToForumEntry = nil
		}
		o.R.InReplyToForumEntries = nil
	}

	return o.AddInReplyToForumEntries(ctx, exec, insert, related...)
}

// RemoveInReplyToForumEntries relationships from objects passed in.
// Removes related items from R.InReplyToForumEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.InReplyToForumEntry.
func (o *ForumEntry) RemoveInReplyToForumEntries(ctx context.Context, exec boil.ContextExecutor, related ...*ForumEntry) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InReplyTo, nil)
		if rel.R != nil {
			rel.R.InReplyToForumEntry = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("in_reply_to")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InReplyToForumEntries {
			if rel != ri {
				continue
			}

			ln := len(o.R.InReplyToForumEntries)
			if ln > 1 && i < ln-1 {
				o.R.InReplyToForumEntries[i] = o.R.InReplyToForumEntries[ln-1]
			}
			o.R.InReplyToForumEntries = o.R.InReplyToForumEntries[:ln-1]
			break
		}
	}

	return nil
}

// ForumEntries retrieves all the records using an executor.
func ForumEntries(mods ...qm.QueryMod) forumEntryQuery {
	mods = append(mods, qm.From("`forum_entry`"), qmhelper.WhereIsNull("`forum_entry`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`forum_entry`.*"})
	}

	return forumEntryQuery{q}
}

// FindForumEntry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindForumEntry(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ForumEntry, error) {
	forumEntryObj := &ForumEntry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `forum_entry` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, forumEntryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from forum_entry")
	}

	if err = forumEntryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return forumEntryObj, err
	}

	return forumEntryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ForumEntry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no forum_entry provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(forumEntryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	forumEntryInsertCacheMut.RLock()
	cache, cached := forumEntryInsertCache[key]
	forumEntryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			forumEntryAllColumns,
			forumEntryColumnsWithDefault,
			forumEntryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(forumEntryType, forumEntryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(forumEntryType, forumEntryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `forum_entry` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `forum_entry` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `forum_entry` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, forumEntryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into forum_entry")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == forumEntryMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for forum_entry")
	}

CacheNoHooks:
	if !cached {
		forumEntryInsertCacheMut.Lock()
		forumEntryInsertCache[key] = cache
		forumEntryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ForumEntry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ForumEntry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	forumEntryUpdateCacheMut.RLock()
	cache, cached := forumEntryUpdateCache[key]
	forumEntryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			forumEntryAllColumns,
			forumEntryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update forum_entry, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `forum_entry` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, forumEntryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(forumEntryType, forumEntryMapping, append(wl, forumEntryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update forum_entry row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for forum_entry")
	}

	if !cached {
		forumEntryUpdateCacheMut.Lock()
		forumEntryUpdateCache[key] = cache
		forumEntryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q forumEntryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for forum_entry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for forum_entry")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ForumEntrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), forumEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `forum_entry` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, forumEntryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in forumEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all forumEntry")
	}
	return rowsAff, nil
}

var mySQLForumEntryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ForumEntry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no forum_entry provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(forumEntryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLForumEntryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	forumEntryUpsertCacheMut.RLock()
	cache, cached := forumEntryUpsertCache[key]
	forumEntryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			forumEntryAllColumns,
			forumEntryColumnsWithDefault,
			forumEntryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			forumEntryAllColumns,
			forumEntryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert forum_entry, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`forum_entry`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `forum_entry` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(forumEntryType, forumEntryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(forumEntryType, forumEntryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for forum_entry")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == forumEntryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(forumEntryType, forumEntryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for forum_entry")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for forum_entry")
	}

CacheNoHooks:
	if !cached {
		forumEntryUpsertCacheMut.Lock()
		forumEntryUpsertCache[key] = cache
		forumEntryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ForumEntry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ForumEntry) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ForumEntry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), forumEntryPrimaryKeyMapping)
		sql = "DELETE FROM `forum_entry` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `forum_entry` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(forumEntryType, forumEntryMapping, append(wl, forumEntryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from forum_entry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for forum_entry")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q forumEntryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no forumEntryQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from forum_entry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for forum_entry")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ForumEntrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(forumEntryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), forumEntryPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `forum_entry` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, forumEntryPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), forumEntryPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `forum_entry` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, forumEntryPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from forumEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for forum_entry")
	}

	if len(forumEntryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ForumEntry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindForumEntry(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ForumEntrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ForumEntrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), forumEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `forum_entry`.* FROM `forum_entry` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, forumEntryPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ForumEntrySlice")
	}

	*o = slice

	return nil
}

// ForumEntryExists checks if the ForumEntry row exists.
func ForumEntryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `forum_entry` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if forum_entry exists")
	}

	return exists, nil
}

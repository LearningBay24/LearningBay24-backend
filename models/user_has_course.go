// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserHasCourse is an object representing the database table.
type UserHasCourse struct {
	UserID   int `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CourseID int `boil:"course_id" json:"course_id" toml:"course_id" yaml:"course_id"`
	RoleID   int `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	// The time the user enrolled in the given course.
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *userHasCourseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userHasCourseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserHasCourseColumns = struct {
	UserID    string
	CourseID  string
	RoleID    string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	UserID:    "user_id",
	CourseID:  "course_id",
	RoleID:    "role_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var UserHasCourseTableColumns = struct {
	UserID    string
	CourseID  string
	RoleID    string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	UserID:    "user_has_course.user_id",
	CourseID:  "user_has_course.course_id",
	RoleID:    "user_has_course.role_id",
	CreatedAt: "user_has_course.created_at",
	UpdatedAt: "user_has_course.updated_at",
	DeletedAt: "user_has_course.deleted_at",
}

// Generated where

var UserHasCourseWhere = struct {
	UserID    whereHelperint
	CourseID  whereHelperint
	RoleID    whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	UserID:    whereHelperint{field: "`user_has_course`.`user_id`"},
	CourseID:  whereHelperint{field: "`user_has_course`.`course_id`"},
	RoleID:    whereHelperint{field: "`user_has_course`.`role_id`"},
	CreatedAt: whereHelpertime_Time{field: "`user_has_course`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`user_has_course`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`user_has_course`.`deleted_at`"},
}

// UserHasCourseRels is where relationship names are stored.
var UserHasCourseRels = struct {
	Course string
	Role   string
	User   string
}{
	Course: "Course",
	Role:   "Role",
	User:   "User",
}

// userHasCourseR is where relationships are stored.
type userHasCourseR struct {
	Course *Course `boil:"Course" json:"Course" toml:"Course" yaml:"Course"`
	Role   *Role   `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
	User   *User   `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userHasCourseR) NewStruct() *userHasCourseR {
	return &userHasCourseR{}
}

func (r *userHasCourseR) GetCourse() *Course {
	if r == nil {
		return nil
	}
	return r.Course
}

func (r *userHasCourseR) GetRole() *Role {
	if r == nil {
		return nil
	}
	return r.Role
}

func (r *userHasCourseR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userHasCourseL is where Load methods for each relationship are stored.
type userHasCourseL struct{}

var (
	userHasCourseAllColumns            = []string{"user_id", "course_id", "role_id", "created_at", "updated_at", "deleted_at"}
	userHasCourseColumnsWithoutDefault = []string{"user_id", "course_id", "role_id", "updated_at", "deleted_at"}
	userHasCourseColumnsWithDefault    = []string{"created_at"}
	userHasCoursePrimaryKeyColumns     = []string{"user_id", "course_id"}
	userHasCourseGeneratedColumns      = []string{}
)

type (
	// UserHasCourseSlice is an alias for a slice of pointers to UserHasCourse.
	// This should almost always be used instead of []UserHasCourse.
	UserHasCourseSlice []*UserHasCourse
	// UserHasCourseHook is the signature for custom UserHasCourse hook methods
	UserHasCourseHook func(context.Context, boil.ContextExecutor, *UserHasCourse) error

	userHasCourseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userHasCourseType                 = reflect.TypeOf(&UserHasCourse{})
	userHasCourseMapping              = queries.MakeStructMapping(userHasCourseType)
	userHasCoursePrimaryKeyMapping, _ = queries.BindMapping(userHasCourseType, userHasCourseMapping, userHasCoursePrimaryKeyColumns)
	userHasCourseInsertCacheMut       sync.RWMutex
	userHasCourseInsertCache          = make(map[string]insertCache)
	userHasCourseUpdateCacheMut       sync.RWMutex
	userHasCourseUpdateCache          = make(map[string]updateCache)
	userHasCourseUpsertCacheMut       sync.RWMutex
	userHasCourseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userHasCourseAfterSelectHooks []UserHasCourseHook

var userHasCourseBeforeInsertHooks []UserHasCourseHook
var userHasCourseAfterInsertHooks []UserHasCourseHook

var userHasCourseBeforeUpdateHooks []UserHasCourseHook
var userHasCourseAfterUpdateHooks []UserHasCourseHook

var userHasCourseBeforeDeleteHooks []UserHasCourseHook
var userHasCourseAfterDeleteHooks []UserHasCourseHook

var userHasCourseBeforeUpsertHooks []UserHasCourseHook
var userHasCourseAfterUpsertHooks []UserHasCourseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserHasCourse) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasCourseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserHasCourse) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasCourseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserHasCourse) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasCourseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserHasCourse) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasCourseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserHasCourse) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasCourseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserHasCourse) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasCourseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserHasCourse) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasCourseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserHasCourse) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasCourseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserHasCourse) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userHasCourseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserHasCourseHook registers your hook function for all future operations.
func AddUserHasCourseHook(hookPoint boil.HookPoint, userHasCourseHook UserHasCourseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userHasCourseAfterSelectHooks = append(userHasCourseAfterSelectHooks, userHasCourseHook)
	case boil.BeforeInsertHook:
		userHasCourseBeforeInsertHooks = append(userHasCourseBeforeInsertHooks, userHasCourseHook)
	case boil.AfterInsertHook:
		userHasCourseAfterInsertHooks = append(userHasCourseAfterInsertHooks, userHasCourseHook)
	case boil.BeforeUpdateHook:
		userHasCourseBeforeUpdateHooks = append(userHasCourseBeforeUpdateHooks, userHasCourseHook)
	case boil.AfterUpdateHook:
		userHasCourseAfterUpdateHooks = append(userHasCourseAfterUpdateHooks, userHasCourseHook)
	case boil.BeforeDeleteHook:
		userHasCourseBeforeDeleteHooks = append(userHasCourseBeforeDeleteHooks, userHasCourseHook)
	case boil.AfterDeleteHook:
		userHasCourseAfterDeleteHooks = append(userHasCourseAfterDeleteHooks, userHasCourseHook)
	case boil.BeforeUpsertHook:
		userHasCourseBeforeUpsertHooks = append(userHasCourseBeforeUpsertHooks, userHasCourseHook)
	case boil.AfterUpsertHook:
		userHasCourseAfterUpsertHooks = append(userHasCourseAfterUpsertHooks, userHasCourseHook)
	}
}

// One returns a single userHasCourse record from the query.
func (q userHasCourseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserHasCourse, error) {
	o := &UserHasCourse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_has_course")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserHasCourse records from the query.
func (q userHasCourseQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserHasCourseSlice, error) {
	var o []*UserHasCourse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserHasCourse slice")
	}

	if len(userHasCourseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserHasCourse records in the query.
func (q userHasCourseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_has_course rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userHasCourseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_has_course exists")
	}

	return count > 0, nil
}

// Course pointed to by the foreign key.
func (o *UserHasCourse) Course(mods ...qm.QueryMod) courseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CourseID),
	}

	queryMods = append(queryMods, mods...)

	return Courses(queryMods...)
}

// Role pointed to by the foreign key.
func (o *UserHasCourse) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	return Roles(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserHasCourse) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadCourse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userHasCourseL) LoadCourse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserHasCourse interface{}, mods queries.Applicator) error {
	var slice []*UserHasCourse
	var object *UserHasCourse

	if singular {
		object = maybeUserHasCourse.(*UserHasCourse)
	} else {
		slice = *maybeUserHasCourse.(*[]*UserHasCourse)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userHasCourseR{}
		}
		args = append(args, object.CourseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userHasCourseR{}
			}

			for _, a := range args {
				if a == obj.CourseID {
					continue Outer
				}
			}

			args = append(args, obj.CourseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`course`),
		qm.WhereIn(`course.id in ?`, args...),
		qmhelper.WhereIsNull(`course.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Course")
	}

	var resultSlice []*Course
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for course")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course")
	}

	if len(userHasCourseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Course = foreign
		if foreign.R == nil {
			foreign.R = &courseR{}
		}
		foreign.R.UserHasCourses = append(foreign.R.UserHasCourses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CourseID == foreign.ID {
				local.R.Course = foreign
				if foreign.R == nil {
					foreign.R = &courseR{}
				}
				foreign.R.UserHasCourses = append(foreign.R.UserHasCourses, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userHasCourseL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserHasCourse interface{}, mods queries.Applicator) error {
	var slice []*UserHasCourse
	var object *UserHasCourse

	if singular {
		object = maybeUserHasCourse.(*UserHasCourse)
	} else {
		slice = *maybeUserHasCourse.(*[]*UserHasCourse)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userHasCourseR{}
		}
		args = append(args, object.RoleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userHasCourseR{}
			}

			for _, a := range args {
				if a == obj.RoleID {
					continue Outer
				}
			}

			args = append(args, obj.RoleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`role`),
		qm.WhereIn(`role.id in ?`, args...),
		qmhelper.WhereIsNull(`role.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for role")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role")
	}

	if len(userHasCourseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.UserHasCourses = append(foreign.R.UserHasCourses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.UserHasCourses = append(foreign.R.UserHasCourses, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userHasCourseL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserHasCourse interface{}, mods queries.Applicator) error {
	var slice []*UserHasCourse
	var object *UserHasCourse

	if singular {
		object = maybeUserHasCourse.(*UserHasCourse)
	} else {
		slice = *maybeUserHasCourse.(*[]*UserHasCourse)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userHasCourseR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userHasCourseR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userHasCourseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserHasCourses = append(foreign.R.UserHasCourses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserHasCourses = append(foreign.R.UserHasCourses, local)
				break
			}
		}
	}

	return nil
}

// SetCourse of the userHasCourse to the related item.
// Sets o.R.Course to related.
// Adds o to related.R.UserHasCourses.
func (o *UserHasCourse) SetCourse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Course) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_has_course` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
		strmangle.WhereClause("`", "`", 0, userHasCoursePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.CourseID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CourseID = related.ID
	if o.R == nil {
		o.R = &userHasCourseR{
			Course: related,
		}
	} else {
		o.R.Course = related
	}

	if related.R == nil {
		related.R = &courseR{
			UserHasCourses: UserHasCourseSlice{o},
		}
	} else {
		related.R.UserHasCourses = append(related.R.UserHasCourses, o)
	}

	return nil
}

// SetRole of the userHasCourse to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.UserHasCourses.
func (o *UserHasCourse) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_has_course` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"role_id"}),
		strmangle.WhereClause("`", "`", 0, userHasCoursePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.CourseID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &userHasCourseR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			UserHasCourses: UserHasCourseSlice{o},
		}
	} else {
		related.R.UserHasCourses = append(related.R.UserHasCourses, o)
	}

	return nil
}

// SetUser of the userHasCourse to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserHasCourses.
func (o *UserHasCourse) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_has_course` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userHasCoursePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.CourseID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userHasCourseR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserHasCourses: UserHasCourseSlice{o},
		}
	} else {
		related.R.UserHasCourses = append(related.R.UserHasCourses, o)
	}

	return nil
}

// UserHasCourses retrieves all the records using an executor.
func UserHasCourses(mods ...qm.QueryMod) userHasCourseQuery {
	mods = append(mods, qm.From("`user_has_course`"), qmhelper.WhereIsNull("`user_has_course`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_has_course`.*"})
	}

	return userHasCourseQuery{q}
}

// FindUserHasCourse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserHasCourse(ctx context.Context, exec boil.ContextExecutor, userID int, courseID int, selectCols ...string) (*UserHasCourse, error) {
	userHasCourseObj := &UserHasCourse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_has_course` where `user_id`=? AND `course_id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, userID, courseID)

	err := q.Bind(ctx, exec, userHasCourseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_has_course")
	}

	if err = userHasCourseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userHasCourseObj, err
	}

	return userHasCourseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserHasCourse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_has_course provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userHasCourseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userHasCourseInsertCacheMut.RLock()
	cache, cached := userHasCourseInsertCache[key]
	userHasCourseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userHasCourseAllColumns,
			userHasCourseColumnsWithDefault,
			userHasCourseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userHasCourseType, userHasCourseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userHasCourseType, userHasCourseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_has_course` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_has_course` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_has_course` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userHasCoursePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_has_course")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
		o.CourseID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_has_course")
	}

CacheNoHooks:
	if !cached {
		userHasCourseInsertCacheMut.Lock()
		userHasCourseInsertCache[key] = cache
		userHasCourseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserHasCourse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserHasCourse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userHasCourseUpdateCacheMut.RLock()
	cache, cached := userHasCourseUpdateCache[key]
	userHasCourseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userHasCourseAllColumns,
			userHasCoursePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_has_course, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_has_course` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userHasCoursePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userHasCourseType, userHasCourseMapping, append(wl, userHasCoursePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_has_course row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_has_course")
	}

	if !cached {
		userHasCourseUpdateCacheMut.Lock()
		userHasCourseUpdateCache[key] = cache
		userHasCourseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userHasCourseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_has_course")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_has_course")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserHasCourseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userHasCoursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_has_course` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userHasCoursePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userHasCourse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userHasCourse")
	}
	return rowsAff, nil
}

var mySQLUserHasCourseUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserHasCourse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_has_course provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userHasCourseColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserHasCourseUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userHasCourseUpsertCacheMut.RLock()
	cache, cached := userHasCourseUpsertCache[key]
	userHasCourseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userHasCourseAllColumns,
			userHasCourseColumnsWithDefault,
			userHasCourseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userHasCourseAllColumns,
			userHasCoursePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_has_course, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_has_course`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_has_course` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userHasCourseType, userHasCourseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userHasCourseType, userHasCourseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_has_course")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userHasCourseType, userHasCourseMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_has_course")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_has_course")
	}

CacheNoHooks:
	if !cached {
		userHasCourseUpsertCacheMut.Lock()
		userHasCourseUpsertCache[key] = cache
		userHasCourseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserHasCourse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserHasCourse) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserHasCourse provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userHasCoursePrimaryKeyMapping)
		sql = "DELETE FROM `user_has_course` WHERE `user_id`=? AND `course_id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_has_course` SET %s WHERE `user_id`=? AND `course_id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(userHasCourseType, userHasCourseMapping, append(wl, userHasCoursePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_has_course")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_has_course")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userHasCourseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userHasCourseQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_has_course")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_has_course")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserHasCourseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userHasCourseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userHasCoursePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `user_has_course` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userHasCoursePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userHasCoursePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `user_has_course` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userHasCoursePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userHasCourse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_has_course")
	}

	if len(userHasCourseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserHasCourse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserHasCourse(ctx, exec, o.UserID, o.CourseID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserHasCourseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserHasCourseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userHasCoursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_has_course`.* FROM `user_has_course` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userHasCoursePrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserHasCourseSlice")
	}

	*o = slice

	return nil
}

// UserHasCourseExists checks if the UserHasCourse row exists.
func UserHasCourseExists(ctx context.Context, exec boil.ContextExecutor, userID int, courseID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_has_course` where `user_id`=? AND `course_id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, courseID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, courseID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_has_course exists")
	}

	return exists, nil
}

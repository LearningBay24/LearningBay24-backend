// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// File is an object representing the database table.
type File struct {
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Displayed name of the file.
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// Local or remote file. Stored as an URI.
	URI string `boil:"uri" json:"uri" toml:"uri" yaml:"uri"`
	// Wether the file is a local or remote one.
	Local int8 `boil:"local" json:"local" toml:"local" yaml:"local"`
	// User that uploaded this file.
	UploaderID int `boil:"uploader_id" json:"uploader_id" toml:"uploader_id" yaml:"uploader_id"`
	// When the file was created.
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *fileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FileColumns = struct {
	ID         string
	Name       string
	URI        string
	Local      string
	UploaderID string
	CreatedAt  string
	DeletedAt  string
}{
	ID:         "id",
	Name:       "name",
	URI:        "uri",
	Local:      "local",
	UploaderID: "uploader_id",
	CreatedAt:  "created_at",
	DeletedAt:  "deleted_at",
}

var FileTableColumns = struct {
	ID         string
	Name       string
	URI        string
	Local      string
	UploaderID string
	CreatedAt  string
	DeletedAt  string
}{
	ID:         "file.id",
	Name:       "file.name",
	URI:        "file.uri",
	Local:      "file.local",
	UploaderID: "file.uploader_id",
	CreatedAt:  "file.created_at",
	DeletedAt:  "file.deleted_at",
}

// Generated where

var FileWhere = struct {
	ID         whereHelperint
	Name       whereHelperstring
	URI        whereHelperstring
	Local      whereHelperint8
	UploaderID whereHelperint
	CreatedAt  whereHelpertime_Time
	DeletedAt  whereHelpernull_Time
}{
	ID:         whereHelperint{field: "`file`.`id`"},
	Name:       whereHelperstring{field: "`file`.`name`"},
	URI:        whereHelperstring{field: "`file`.`uri`"},
	Local:      whereHelperint8{field: "`file`.`local`"},
	UploaderID: whereHelperint{field: "`file`.`uploader_id`"},
	CreatedAt:  whereHelpertime_Time{field: "`file`.`created_at`"},
	DeletedAt:  whereHelpernull_Time{field: "`file`.`deleted_at`"},
}

// FileRels is where relationship names are stored.
var FileRels = struct {
	Uploader            string
	CourseHasFiles      string
	Directories         string
	Exams               string
	Submissions         string
	ProfilePictureUsers string
	UserSubmissions     string
}{
	Uploader:            "Uploader",
	CourseHasFiles:      "CourseHasFiles",
	Directories:         "Directories",
	Exams:               "Exams",
	Submissions:         "Submissions",
	ProfilePictureUsers: "ProfilePictureUsers",
	UserSubmissions:     "UserSubmissions",
}

// fileR is where relationships are stored.
type fileR struct {
	Uploader            *User               `boil:"Uploader" json:"Uploader" toml:"Uploader" yaml:"Uploader"`
	CourseHasFiles      CourseHasFileSlice  `boil:"CourseHasFiles" json:"CourseHasFiles" toml:"CourseHasFiles" yaml:"CourseHasFiles"`
	Directories         DirectorySlice      `boil:"Directories" json:"Directories" toml:"Directories" yaml:"Directories"`
	Exams               ExamSlice           `boil:"Exams" json:"Exams" toml:"Exams" yaml:"Exams"`
	Submissions         SubmissionSlice     `boil:"Submissions" json:"Submissions" toml:"Submissions" yaml:"Submissions"`
	ProfilePictureUsers UserSlice           `boil:"ProfilePictureUsers" json:"ProfilePictureUsers" toml:"ProfilePictureUsers" yaml:"ProfilePictureUsers"`
	UserSubmissions     UserSubmissionSlice `boil:"UserSubmissions" json:"UserSubmissions" toml:"UserSubmissions" yaml:"UserSubmissions"`
}

// NewStruct creates a new relationship struct
func (*fileR) NewStruct() *fileR {
	return &fileR{}
}

func (r *fileR) GetUploader() *User {
	if r == nil {
		return nil
	}
	return r.Uploader
}

func (r *fileR) GetCourseHasFiles() CourseHasFileSlice {
	if r == nil {
		return nil
	}
	return r.CourseHasFiles
}

func (r *fileR) GetDirectories() DirectorySlice {
	if r == nil {
		return nil
	}
	return r.Directories
}

func (r *fileR) GetExams() ExamSlice {
	if r == nil {
		return nil
	}
	return r.Exams
}

func (r *fileR) GetSubmissions() SubmissionSlice {
	if r == nil {
		return nil
	}
	return r.Submissions
}

func (r *fileR) GetProfilePictureUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.ProfilePictureUsers
}

func (r *fileR) GetUserSubmissions() UserSubmissionSlice {
	if r == nil {
		return nil
	}
	return r.UserSubmissions
}

// fileL is where Load methods for each relationship are stored.
type fileL struct{}

var (
	fileAllColumns            = []string{"id", "name", "uri", "local", "uploader_id", "created_at", "deleted_at"}
	fileColumnsWithoutDefault = []string{"name", "uri", "local", "uploader_id", "deleted_at"}
	fileColumnsWithDefault    = []string{"id", "created_at"}
	filePrimaryKeyColumns     = []string{"id"}
	fileGeneratedColumns      = []string{}
)

type (
	// FileSlice is an alias for a slice of pointers to File.
	// This should almost always be used instead of []File.
	FileSlice []*File
	// FileHook is the signature for custom File hook methods
	FileHook func(context.Context, boil.ContextExecutor, *File) error

	fileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fileType                 = reflect.TypeOf(&File{})
	fileMapping              = queries.MakeStructMapping(fileType)
	filePrimaryKeyMapping, _ = queries.BindMapping(fileType, fileMapping, filePrimaryKeyColumns)
	fileInsertCacheMut       sync.RWMutex
	fileInsertCache          = make(map[string]insertCache)
	fileUpdateCacheMut       sync.RWMutex
	fileUpdateCache          = make(map[string]updateCache)
	fileUpsertCacheMut       sync.RWMutex
	fileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fileAfterSelectHooks []FileHook

var fileBeforeInsertHooks []FileHook
var fileAfterInsertHooks []FileHook

var fileBeforeUpdateHooks []FileHook
var fileAfterUpdateHooks []FileHook

var fileBeforeDeleteHooks []FileHook
var fileAfterDeleteHooks []FileHook

var fileBeforeUpsertHooks []FileHook
var fileAfterUpsertHooks []FileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *File) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *File) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *File) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *File) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *File) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *File) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *File) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *File) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *File) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFileHook registers your hook function for all future operations.
func AddFileHook(hookPoint boil.HookPoint, fileHook FileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fileAfterSelectHooks = append(fileAfterSelectHooks, fileHook)
	case boil.BeforeInsertHook:
		fileBeforeInsertHooks = append(fileBeforeInsertHooks, fileHook)
	case boil.AfterInsertHook:
		fileAfterInsertHooks = append(fileAfterInsertHooks, fileHook)
	case boil.BeforeUpdateHook:
		fileBeforeUpdateHooks = append(fileBeforeUpdateHooks, fileHook)
	case boil.AfterUpdateHook:
		fileAfterUpdateHooks = append(fileAfterUpdateHooks, fileHook)
	case boil.BeforeDeleteHook:
		fileBeforeDeleteHooks = append(fileBeforeDeleteHooks, fileHook)
	case boil.AfterDeleteHook:
		fileAfterDeleteHooks = append(fileAfterDeleteHooks, fileHook)
	case boil.BeforeUpsertHook:
		fileBeforeUpsertHooks = append(fileBeforeUpsertHooks, fileHook)
	case boil.AfterUpsertHook:
		fileAfterUpsertHooks = append(fileAfterUpsertHooks, fileHook)
	}
}

// One returns a single file record from the query.
func (q fileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*File, error) {
	o := &File{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for file")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all File records from the query.
func (q fileQuery) All(ctx context.Context, exec boil.ContextExecutor) (FileSlice, error) {
	var o []*File

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to File slice")
	}

	if len(fileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all File records in the query.
func (q fileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count file rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if file exists")
	}

	return count > 0, nil
}

// Uploader pointed to by the foreign key.
func (o *File) Uploader(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UploaderID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// CourseHasFiles retrieves all the course_has_file's CourseHasFiles with an executor.
func (o *File) CourseHasFiles(mods ...qm.QueryMod) courseHasFileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`course_has_files`.`file_id`=?", o.ID),
	)

	return CourseHasFiles(queryMods...)
}

// Directories retrieves all the directory's Directories with an executor.
func (o *File) Directories(mods ...qm.QueryMod) directoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`directory_has_files` on `directory`.`id` = `directory_has_files`.`directory_id`"),
		qm.Where("`directory_has_files`.`file_id`=?", o.ID),
	)

	return Directories(queryMods...)
}

// Exams retrieves all the exam's Exams with an executor.
func (o *File) Exams(mods ...qm.QueryMod) examQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`exam_has_files` on `exam`.`id` = `exam_has_files`.`exam_id`"),
		qm.Where("`exam_has_files`.`file_id`=?", o.ID),
	)

	return Exams(queryMods...)
}

// Submissions retrieves all the submission's Submissions with an executor.
func (o *File) Submissions(mods ...qm.QueryMod) submissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`submission_has_files` on `submission`.`id` = `submission_has_files`.`submission_id`"),
		qm.Where("`submission_has_files`.`file_id`=?", o.ID),
	)

	return Submissions(queryMods...)
}

// ProfilePictureUsers retrieves all the user's Users with an executor via profile_picture column.
func (o *File) ProfilePictureUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user`.`profile_picture`=?", o.ID),
	)

	return Users(queryMods...)
}

// UserSubmissions retrieves all the user_submission's UserSubmissions with an executor.
func (o *File) UserSubmissions(mods ...qm.QueryMod) userSubmissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`user_submission_has_files` on `user_submission`.`id` = `user_submission_has_files`.`user_submission_id`"),
		qm.Where("`user_submission_has_files`.`file_id`=?", o.ID),
	)

	return UserSubmissions(queryMods...)
}

// LoadUploader allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fileL) LoadUploader(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFile interface{}, mods queries.Applicator) error {
	var slice []*File
	var object *File

	if singular {
		object = maybeFile.(*File)
	} else {
		slice = *maybeFile.(*[]*File)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fileR{}
		}
		args = append(args, object.UploaderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fileR{}
			}

			for _, a := range args {
				if a == obj.UploaderID {
					continue Outer
				}
			}

			args = append(args, obj.UploaderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(fileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Uploader = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UploaderFiles = append(foreign.R.UploaderFiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UploaderID == foreign.ID {
				local.R.Uploader = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UploaderFiles = append(foreign.R.UploaderFiles, local)
				break
			}
		}
	}

	return nil
}

// LoadCourseHasFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fileL) LoadCourseHasFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFile interface{}, mods queries.Applicator) error {
	var slice []*File
	var object *File

	if singular {
		object = maybeFile.(*File)
	} else {
		slice = *maybeFile.(*[]*File)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`course_has_files`),
		qm.WhereIn(`course_has_files.file_id in ?`, args...),
		qmhelper.WhereIsNull(`course_has_files.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load course_has_files")
	}

	var resultSlice []*CourseHasFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice course_has_files")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on course_has_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course_has_files")
	}

	if len(courseHasFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CourseHasFiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &courseHasFileR{}
			}
			foreign.R.File = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FileID {
				local.R.CourseHasFiles = append(local.R.CourseHasFiles, foreign)
				if foreign.R == nil {
					foreign.R = &courseHasFileR{}
				}
				foreign.R.File = local
				break
			}
		}
	}

	return nil
}

// LoadDirectories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fileL) LoadDirectories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFile interface{}, mods queries.Applicator) error {
	var slice []*File
	var object *File

	if singular {
		object = maybeFile.(*File)
	} else {
		slice = *maybeFile.(*[]*File)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`directory`.`id`, `directory`.`name`, `directory`.`course_id`, `directory`.`visible_from`, `directory`.`created_at`, `directory`.`updated_at`, `directory`.`deleted_at`, `a`.`file_id`"),
		qm.From("`directory`"),
		qm.InnerJoin("`directory_has_files` as `a` on `directory`.`id` = `a`.`directory_id`"),
		qm.WhereIn("`a`.`file_id` in ?", args...),
		qmhelper.WhereIsNull("`directory`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load directory")
	}

	var resultSlice []*Directory

	var localJoinCols []int
	for results.Next() {
		one := new(Directory)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.CourseID, &one.VisibleFrom, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for directory")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice directory")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on directory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for directory")
	}

	if len(directoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Directories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &directoryR{}
			}
			foreign.R.Files = append(foreign.R.Files, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Directories = append(local.R.Directories, foreign)
				if foreign.R == nil {
					foreign.R = &directoryR{}
				}
				foreign.R.Files = append(foreign.R.Files, local)
				break
			}
		}
	}

	return nil
}

// LoadExams allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fileL) LoadExams(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFile interface{}, mods queries.Applicator) error {
	var slice []*File
	var object *File

	if singular {
		object = maybeFile.(*File)
	} else {
		slice = *maybeFile.(*[]*File)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`exam`.`id`, `exam`.`name`, `exam`.`description`, `exam`.`date`, `exam`.`duration`, `exam`.`online`, `exam`.`location`, `exam`.`course_id`, `exam`.`creator_id`, `exam`.`graded`, `exam`.`register_deadline`, `exam`.`deregister_deadline`, `exam`.`created_at`, `exam`.`updated_at`, `exam`.`deleted_at`, `a`.`file_id`"),
		qm.From("`exam`"),
		qm.InnerJoin("`exam_has_files` as `a` on `exam`.`id` = `a`.`exam_id`"),
		qm.WhereIn("`a`.`file_id` in ?", args...),
		qmhelper.WhereIsNull("`exam`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load exam")
	}

	var resultSlice []*Exam

	var localJoinCols []int
	for results.Next() {
		one := new(Exam)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.Description, &one.Date, &one.Duration, &one.Online, &one.Location, &one.CourseID, &one.CreatorID, &one.Graded, &one.RegisterDeadline, &one.DeregisterDeadline, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for exam")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice exam")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on exam")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exam")
	}

	if len(examAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Exams = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examR{}
			}
			foreign.R.Files = append(foreign.R.Files, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Exams = append(local.R.Exams, foreign)
				if foreign.R == nil {
					foreign.R = &examR{}
				}
				foreign.R.Files = append(foreign.R.Files, local)
				break
			}
		}
	}

	return nil
}

// LoadSubmissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fileL) LoadSubmissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFile interface{}, mods queries.Applicator) error {
	var slice []*File
	var object *File

	if singular {
		object = maybeFile.(*File)
	} else {
		slice = *maybeFile.(*[]*File)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`submission`.`id`, `submission`.`name`, `submission`.`deadline`, `submission`.`course_id`, `submission`.`max_filesize`, `submission`.`visible_from`, `submission`.`created_at`, `submission`.`updated_at`, `submission`.`graded_at`, `submission`.`deleted_at`, `a`.`file_id`"),
		qm.From("`submission`"),
		qm.InnerJoin("`submission_has_files` as `a` on `submission`.`id` = `a`.`submission_id`"),
		qm.WhereIn("`a`.`file_id` in ?", args...),
		qmhelper.WhereIsNull("`submission`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load submission")
	}

	var resultSlice []*Submission

	var localJoinCols []int
	for results.Next() {
		one := new(Submission)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.Deadline, &one.CourseID, &one.MaxFilesize, &one.VisibleFrom, &one.CreatedAt, &one.UpdatedAt, &one.GradedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for submission")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice submission")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on submission")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for submission")
	}

	if len(submissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Submissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &submissionR{}
			}
			foreign.R.Files = append(foreign.R.Files, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Submissions = append(local.R.Submissions, foreign)
				if foreign.R == nil {
					foreign.R = &submissionR{}
				}
				foreign.R.Files = append(foreign.R.Files, local)
				break
			}
		}
	}

	return nil
}

// LoadProfilePictureUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fileL) LoadProfilePictureUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFile interface{}, mods queries.Applicator) error {
	var slice []*File
	var object *File

	if singular {
		object = maybeFile.(*File)
	} else {
		slice = *maybeFile.(*[]*File)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fileR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.profile_picture in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProfilePictureUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.ProfilePictureFile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProfilePicture) {
				local.R.ProfilePictureUsers = append(local.R.ProfilePictureUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ProfilePictureFile = local
				break
			}
		}
	}

	return nil
}

// LoadUserSubmissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fileL) LoadUserSubmissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFile interface{}, mods queries.Applicator) error {
	var slice []*File
	var object *File

	if singular {
		object = maybeFile.(*File)
	} else {
		slice = *maybeFile.(*[]*File)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`user_submission`.`id`, `user_submission`.`name`, `user_submission`.`submitter_id`, `user_submission`.`submission_id`, `user_submission`.`grade`, `user_submission`.`ignores_submission_deadline`, `user_submission`.`submission_time`, `user_submission`.`created_at`, `user_submission`.`deleted_at`, `user_submission`.`updated_at`, `a`.`file_id`"),
		qm.From("`user_submission`"),
		qm.InnerJoin("`user_submission_has_files` as `a` on `user_submission`.`id` = `a`.`user_submission_id`"),
		qm.WhereIn("`a`.`file_id` in ?", args...),
		qmhelper.WhereIsNull("`user_submission`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_submission")
	}

	var resultSlice []*UserSubmission

	var localJoinCols []int
	for results.Next() {
		one := new(UserSubmission)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.SubmitterID, &one.SubmissionID, &one.Grade, &one.IgnoresSubmissionDeadline, &one.SubmissionTime, &one.CreatedAt, &one.DeletedAt, &one.UpdatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for user_submission")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice user_submission")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_submission")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_submission")
	}

	if len(userSubmissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserSubmissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userSubmissionR{}
			}
			foreign.R.Files = append(foreign.R.Files, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.UserSubmissions = append(local.R.UserSubmissions, foreign)
				if foreign.R == nil {
					foreign.R = &userSubmissionR{}
				}
				foreign.R.Files = append(foreign.R.Files, local)
				break
			}
		}
	}

	return nil
}

// SetUploader of the file to the related item.
// Sets o.R.Uploader to related.
// Adds o to related.R.UploaderFiles.
func (o *File) SetUploader(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `file` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"uploader_id"}),
		strmangle.WhereClause("`", "`", 0, filePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UploaderID = related.ID
	if o.R == nil {
		o.R = &fileR{
			Uploader: related,
		}
	} else {
		o.R.Uploader = related
	}

	if related.R == nil {
		related.R = &userR{
			UploaderFiles: FileSlice{o},
		}
	} else {
		related.R.UploaderFiles = append(related.R.UploaderFiles, o)
	}

	return nil
}

// AddCourseHasFiles adds the given related objects to the existing relationships
// of the file, optionally inserting them as new records.
// Appends related to o.R.CourseHasFiles.
// Sets related.R.File appropriately.
func (o *File) AddCourseHasFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CourseHasFile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FileID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `course_has_files` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"file_id"}),
				strmangle.WhereClause("`", "`", 0, courseHasFilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.CourseID, rel.FileID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FileID = o.ID
		}
	}

	if o.R == nil {
		o.R = &fileR{
			CourseHasFiles: related,
		}
	} else {
		o.R.CourseHasFiles = append(o.R.CourseHasFiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &courseHasFileR{
				File: o,
			}
		} else {
			rel.R.File = o
		}
	}
	return nil
}

// AddDirectories adds the given related objects to the existing relationships
// of the file, optionally inserting them as new records.
// Appends related to o.R.Directories.
// Sets related.R.Files appropriately.
func (o *File) AddDirectories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Directory) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `directory_has_files` (`file_id`, `directory_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &fileR{
			Directories: related,
		}
	} else {
		o.R.Directories = append(o.R.Directories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &directoryR{
				Files: FileSlice{o},
			}
		} else {
			rel.R.Files = append(rel.R.Files, o)
		}
	}
	return nil
}

// SetDirectories removes all previously related items of the
// file replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Files's Directories accordingly.
// Replaces o.R.Directories with related.
// Sets related.R.Files's Directories accordingly.
func (o *File) SetDirectories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Directory) error {
	query := "delete from `directory_has_files` where `file_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeDirectoriesFromFilesSlice(o, related)
	if o.R != nil {
		o.R.Directories = nil
	}

	return o.AddDirectories(ctx, exec, insert, related...)
}

// RemoveDirectories relationships from objects passed in.
// Removes related items from R.Directories (uses pointer comparison, removal does not keep order)
// Sets related.R.Files.
func (o *File) RemoveDirectories(ctx context.Context, exec boil.ContextExecutor, related ...*Directory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `directory_has_files` where `file_id` = ? and `directory_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeDirectoriesFromFilesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Directories {
			if rel != ri {
				continue
			}

			ln := len(o.R.Directories)
			if ln > 1 && i < ln-1 {
				o.R.Directories[i] = o.R.Directories[ln-1]
			}
			o.R.Directories = o.R.Directories[:ln-1]
			break
		}
	}

	return nil
}

func removeDirectoriesFromFilesSlice(o *File, related []*Directory) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Files {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Files)
			if ln > 1 && i < ln-1 {
				rel.R.Files[i] = rel.R.Files[ln-1]
			}
			rel.R.Files = rel.R.Files[:ln-1]
			break
		}
	}
}

// AddExams adds the given related objects to the existing relationships
// of the file, optionally inserting them as new records.
// Appends related to o.R.Exams.
// Sets related.R.Files appropriately.
func (o *File) AddExams(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Exam) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `exam_has_files` (`file_id`, `exam_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &fileR{
			Exams: related,
		}
	} else {
		o.R.Exams = append(o.R.Exams, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examR{
				Files: FileSlice{o},
			}
		} else {
			rel.R.Files = append(rel.R.Files, o)
		}
	}
	return nil
}

// SetExams removes all previously related items of the
// file replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Files's Exams accordingly.
// Replaces o.R.Exams with related.
// Sets related.R.Files's Exams accordingly.
func (o *File) SetExams(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Exam) error {
	query := "delete from `exam_has_files` where `file_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeExamsFromFilesSlice(o, related)
	if o.R != nil {
		o.R.Exams = nil
	}

	return o.AddExams(ctx, exec, insert, related...)
}

// RemoveExams relationships from objects passed in.
// Removes related items from R.Exams (uses pointer comparison, removal does not keep order)
// Sets related.R.Files.
func (o *File) RemoveExams(ctx context.Context, exec boil.ContextExecutor, related ...*Exam) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `exam_has_files` where `file_id` = ? and `exam_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeExamsFromFilesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Exams {
			if rel != ri {
				continue
			}

			ln := len(o.R.Exams)
			if ln > 1 && i < ln-1 {
				o.R.Exams[i] = o.R.Exams[ln-1]
			}
			o.R.Exams = o.R.Exams[:ln-1]
			break
		}
	}

	return nil
}

func removeExamsFromFilesSlice(o *File, related []*Exam) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Files {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Files)
			if ln > 1 && i < ln-1 {
				rel.R.Files[i] = rel.R.Files[ln-1]
			}
			rel.R.Files = rel.R.Files[:ln-1]
			break
		}
	}
}

// AddSubmissions adds the given related objects to the existing relationships
// of the file, optionally inserting them as new records.
// Appends related to o.R.Submissions.
// Sets related.R.Files appropriately.
func (o *File) AddSubmissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Submission) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `submission_has_files` (`file_id`, `submission_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &fileR{
			Submissions: related,
		}
	} else {
		o.R.Submissions = append(o.R.Submissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &submissionR{
				Files: FileSlice{o},
			}
		} else {
			rel.R.Files = append(rel.R.Files, o)
		}
	}
	return nil
}

// SetSubmissions removes all previously related items of the
// file replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Files's Submissions accordingly.
// Replaces o.R.Submissions with related.
// Sets related.R.Files's Submissions accordingly.
func (o *File) SetSubmissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Submission) error {
	query := "delete from `submission_has_files` where `file_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSubmissionsFromFilesSlice(o, related)
	if o.R != nil {
		o.R.Submissions = nil
	}

	return o.AddSubmissions(ctx, exec, insert, related...)
}

// RemoveSubmissions relationships from objects passed in.
// Removes related items from R.Submissions (uses pointer comparison, removal does not keep order)
// Sets related.R.Files.
func (o *File) RemoveSubmissions(ctx context.Context, exec boil.ContextExecutor, related ...*Submission) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `submission_has_files` where `file_id` = ? and `submission_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSubmissionsFromFilesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Submissions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Submissions)
			if ln > 1 && i < ln-1 {
				o.R.Submissions[i] = o.R.Submissions[ln-1]
			}
			o.R.Submissions = o.R.Submissions[:ln-1]
			break
		}
	}

	return nil
}

func removeSubmissionsFromFilesSlice(o *File, related []*Submission) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Files {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Files)
			if ln > 1 && i < ln-1 {
				rel.R.Files[i] = rel.R.Files[ln-1]
			}
			rel.R.Files = rel.R.Files[:ln-1]
			break
		}
	}
}

// AddProfilePictureUsers adds the given related objects to the existing relationships
// of the file, optionally inserting them as new records.
// Appends related to o.R.ProfilePictureUsers.
// Sets related.R.ProfilePictureFile appropriately.
func (o *File) AddProfilePictureUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProfilePicture, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"profile_picture"}),
				strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProfilePicture, o.ID)
		}
	}

	if o.R == nil {
		o.R = &fileR{
			ProfilePictureUsers: related,
		}
	} else {
		o.R.ProfilePictureUsers = append(o.R.ProfilePictureUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				ProfilePictureFile: o,
			}
		} else {
			rel.R.ProfilePictureFile = o
		}
	}
	return nil
}

// SetProfilePictureUsers removes all previously related items of the
// file replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProfilePictureFile's ProfilePictureUsers accordingly.
// Replaces o.R.ProfilePictureUsers with related.
// Sets related.R.ProfilePictureFile's ProfilePictureUsers accordingly.
func (o *File) SetProfilePictureUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update `user` set `profile_picture` = null where `profile_picture` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProfilePictureUsers {
			queries.SetScanner(&rel.ProfilePicture, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProfilePictureFile = nil
		}
		o.R.ProfilePictureUsers = nil
	}

	return o.AddProfilePictureUsers(ctx, exec, insert, related...)
}

// RemoveProfilePictureUsers relationships from objects passed in.
// Removes related items from R.ProfilePictureUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.ProfilePictureFile.
func (o *File) RemoveProfilePictureUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProfilePicture, nil)
		if rel.R != nil {
			rel.R.ProfilePictureFile = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("profile_picture")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProfilePictureUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProfilePictureUsers)
			if ln > 1 && i < ln-1 {
				o.R.ProfilePictureUsers[i] = o.R.ProfilePictureUsers[ln-1]
			}
			o.R.ProfilePictureUsers = o.R.ProfilePictureUsers[:ln-1]
			break
		}
	}

	return nil
}

// AddUserSubmissions adds the given related objects to the existing relationships
// of the file, optionally inserting them as new records.
// Appends related to o.R.UserSubmissions.
// Sets related.R.Files appropriately.
func (o *File) AddUserSubmissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserSubmission) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `user_submission_has_files` (`file_id`, `user_submission_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &fileR{
			UserSubmissions: related,
		}
	} else {
		o.R.UserSubmissions = append(o.R.UserSubmissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userSubmissionR{
				Files: FileSlice{o},
			}
		} else {
			rel.R.Files = append(rel.R.Files, o)
		}
	}
	return nil
}

// SetUserSubmissions removes all previously related items of the
// file replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Files's UserSubmissions accordingly.
// Replaces o.R.UserSubmissions with related.
// Sets related.R.Files's UserSubmissions accordingly.
func (o *File) SetUserSubmissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserSubmission) error {
	query := "delete from `user_submission_has_files` where `file_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUserSubmissionsFromFilesSlice(o, related)
	if o.R != nil {
		o.R.UserSubmissions = nil
	}

	return o.AddUserSubmissions(ctx, exec, insert, related...)
}

// RemoveUserSubmissions relationships from objects passed in.
// Removes related items from R.UserSubmissions (uses pointer comparison, removal does not keep order)
// Sets related.R.Files.
func (o *File) RemoveUserSubmissions(ctx context.Context, exec boil.ContextExecutor, related ...*UserSubmission) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `user_submission_has_files` where `file_id` = ? and `user_submission_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUserSubmissionsFromFilesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserSubmissions {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserSubmissions)
			if ln > 1 && i < ln-1 {
				o.R.UserSubmissions[i] = o.R.UserSubmissions[ln-1]
			}
			o.R.UserSubmissions = o.R.UserSubmissions[:ln-1]
			break
		}
	}

	return nil
}

func removeUserSubmissionsFromFilesSlice(o *File, related []*UserSubmission) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Files {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Files)
			if ln > 1 && i < ln-1 {
				rel.R.Files[i] = rel.R.Files[ln-1]
			}
			rel.R.Files = rel.R.Files[:ln-1]
			break
		}
	}
}

// Files retrieves all the records using an executor.
func Files(mods ...qm.QueryMod) fileQuery {
	mods = append(mods, qm.From("`file`"), qmhelper.WhereIsNull("`file`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`file`.*"})
	}

	return fileQuery{q}
}

// FindFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFile(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*File, error) {
	fileObj := &File{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `file` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from file")
	}

	if err = fileObj.doAfterSelectHooks(ctx, exec); err != nil {
		return fileObj, err
	}

	return fileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *File) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no file provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fileInsertCacheMut.RLock()
	cache, cached := fileInsertCache[key]
	fileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fileAllColumns,
			fileColumnsWithDefault,
			fileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fileType, fileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fileType, fileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `file` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `file` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `file` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, filePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into file")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == fileMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for file")
	}

CacheNoHooks:
	if !cached {
		fileInsertCacheMut.Lock()
		fileInsertCache[key] = cache
		fileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the File.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *File) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fileUpdateCacheMut.RLock()
	cache, cached := fileUpdateCache[key]
	fileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fileAllColumns,
			filePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update file, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `file` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, filePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fileType, fileMapping, append(wl, filePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update file row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for file")
	}

	if !cached {
		fileUpdateCacheMut.Lock()
		fileUpdateCache[key] = cache
		fileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for file")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `file` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in file slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all file")
	}
	return rowsAff, nil
}

var mySQLFileUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *File) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no file provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFileUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fileUpsertCacheMut.RLock()
	cache, cached := fileUpsertCache[key]
	fileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fileAllColumns,
			fileColumnsWithDefault,
			fileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fileAllColumns,
			filePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert file, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`file`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `file` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(fileType, fileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fileType, fileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for file")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == fileMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(fileType, fileMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for file")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for file")
	}

CacheNoHooks:
	if !cached {
		fileUpsertCacheMut.Lock()
		fileUpsertCache[key] = cache
		fileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single File record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *File) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no File provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), filePrimaryKeyMapping)
		sql = "DELETE FROM `file` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `file` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(fileType, fileMapping, append(wl, filePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for file")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fileQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for file")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `file` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `file` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from file slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for file")
	}

	if len(fileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *File) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `file`.* FROM `file` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filePrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FileSlice")
	}

	*o = slice

	return nil
}

// FileExists checks if the File row exists.
func FileExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `file` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if file exists")
	}

	return exists, nil
}

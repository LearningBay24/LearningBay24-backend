// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Exam is an object representing the database table.
type Exam struct {
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Name of the exam.
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// Description of the exam.
	Description string `boil:"description" json:"description" toml:"description" yaml:"description"`
	// Date the exam will be held.
	Date time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	// How long the exam will be in seconds.
	Duration int `boil:"duration" json:"duration" toml:"duration" yaml:"duration"`
	// Whether the exam is an online or offline one.
	Online int8 `boil:"online" json:"online" toml:"online" yaml:"online"`
	// Location where the exam takes place.
	Location null.String `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
	// The course this exam is part of.
	CourseID int `boil:"course_id" json:"course_id" toml:"course_id" yaml:"course_id"`
	// Creator of the exam.
	CreatorID int `boil:"creator_id" json:"creator_id" toml:"creator_id" yaml:"creator_id"`
	// Whether all the submissions for this exam have been graded.
	Graded int8 `boil:"graded" json:"graded" toml:"graded" yaml:"graded"`
	// When the deadline to register is, if there is one.
	RegisterDeadline null.Time `boil:"register_deadline" json:"register_deadline,omitempty" toml:"register_deadline" yaml:"register_deadline,omitempty"`
	// When the deadline to deregister is, if there is one.
	DeregisterDeadline null.Time `boil:"deregister_deadline" json:"deregister_deadline,omitempty" toml:"deregister_deadline" yaml:"deregister_deadline,omitempty"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt          null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *examR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L examL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExamColumns = struct {
	ID                 string
	Name               string
	Description        string
	Date               string
	Duration           string
	Online             string
	Location           string
	CourseID           string
	CreatorID          string
	Graded             string
	RegisterDeadline   string
	DeregisterDeadline string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	Name:               "name",
	Description:        "description",
	Date:               "date",
	Duration:           "duration",
	Online:             "online",
	Location:           "location",
	CourseID:           "course_id",
	CreatorID:          "creator_id",
	Graded:             "graded",
	RegisterDeadline:   "register_deadline",
	DeregisterDeadline: "deregister_deadline",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var ExamTableColumns = struct {
	ID                 string
	Name               string
	Description        string
	Date               string
	Duration           string
	Online             string
	Location           string
	CourseID           string
	CreatorID          string
	Graded             string
	RegisterDeadline   string
	DeregisterDeadline string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "exam.id",
	Name:               "exam.name",
	Description:        "exam.description",
	Date:               "exam.date",
	Duration:           "exam.duration",
	Online:             "exam.online",
	Location:           "exam.location",
	CourseID:           "exam.course_id",
	CreatorID:          "exam.creator_id",
	Graded:             "exam.graded",
	RegisterDeadline:   "exam.register_deadline",
	DeregisterDeadline: "exam.deregister_deadline",
	CreatedAt:          "exam.created_at",
	UpdatedAt:          "exam.updated_at",
	DeletedAt:          "exam.deleted_at",
}

// Generated where

var ExamWhere = struct {
	ID                 whereHelperint
	Name               whereHelperstring
	Description        whereHelperstring
	Date               whereHelpertime_Time
	Duration           whereHelperint
	Online             whereHelperint8
	Location           whereHelpernull_String
	CourseID           whereHelperint
	CreatorID          whereHelperint
	Graded             whereHelperint8
	RegisterDeadline   whereHelpernull_Time
	DeregisterDeadline whereHelpernull_Time
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpernull_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: "`exam`.`id`"},
	Name:               whereHelperstring{field: "`exam`.`name`"},
	Description:        whereHelperstring{field: "`exam`.`description`"},
	Date:               whereHelpertime_Time{field: "`exam`.`date`"},
	Duration:           whereHelperint{field: "`exam`.`duration`"},
	Online:             whereHelperint8{field: "`exam`.`online`"},
	Location:           whereHelpernull_String{field: "`exam`.`location`"},
	CourseID:           whereHelperint{field: "`exam`.`course_id`"},
	CreatorID:          whereHelperint{field: "`exam`.`creator_id`"},
	Graded:             whereHelperint8{field: "`exam`.`graded`"},
	RegisterDeadline:   whereHelpernull_Time{field: "`exam`.`register_deadline`"},
	DeregisterDeadline: whereHelpernull_Time{field: "`exam`.`deregister_deadline`"},
	CreatedAt:          whereHelpertime_Time{field: "`exam`.`created_at`"},
	UpdatedAt:          whereHelpernull_Time{field: "`exam`.`updated_at`"},
	DeletedAt:          whereHelpernull_Time{field: "`exam`.`deleted_at`"},
}

// ExamRels is where relationship names are stored.
var ExamRels = struct {
	Course       string
	Creator      string
	Certificates string
	Files        string
	UserHasExams string
}{
	Course:       "Course",
	Creator:      "Creator",
	Certificates: "Certificates",
	Files:        "Files",
	UserHasExams: "UserHasExams",
}

// examR is where relationships are stored.
type examR struct {
	Course       *Course          `boil:"Course" json:"Course" toml:"Course" yaml:"Course"`
	Creator      *User            `boil:"Creator" json:"Creator" toml:"Creator" yaml:"Creator"`
	Certificates CertificateSlice `boil:"Certificates" json:"Certificates" toml:"Certificates" yaml:"Certificates"`
	Files        FileSlice        `boil:"Files" json:"Files" toml:"Files" yaml:"Files"`
	UserHasExams UserHasExamSlice `boil:"UserHasExams" json:"UserHasExams" toml:"UserHasExams" yaml:"UserHasExams"`
}

// NewStruct creates a new relationship struct
func (*examR) NewStruct() *examR {
	return &examR{}
}

func (r *examR) GetCourse() *Course {
	if r == nil {
		return nil
	}
	return r.Course
}

func (r *examR) GetCreator() *User {
	if r == nil {
		return nil
	}
	return r.Creator
}

func (r *examR) GetCertificates() CertificateSlice {
	if r == nil {
		return nil
	}
	return r.Certificates
}

func (r *examR) GetFiles() FileSlice {
	if r == nil {
		return nil
	}
	return r.Files
}

func (r *examR) GetUserHasExams() UserHasExamSlice {
	if r == nil {
		return nil
	}
	return r.UserHasExams
}

// examL is where Load methods for each relationship are stored.
type examL struct{}

var (
	examAllColumns            = []string{"id", "name", "description", "date", "duration", "online", "location", "course_id", "creator_id", "graded", "register_deadline", "deregister_deadline", "created_at", "updated_at", "deleted_at"}
	examColumnsWithoutDefault = []string{"name", "description", "duration", "online", "location", "course_id", "creator_id", "register_deadline", "deregister_deadline", "updated_at", "deleted_at"}
	examColumnsWithDefault    = []string{"id", "date", "graded", "created_at"}
	examPrimaryKeyColumns     = []string{"id"}
	examGeneratedColumns      = []string{}
)

type (
	// ExamSlice is an alias for a slice of pointers to Exam.
	// This should almost always be used instead of []Exam.
	ExamSlice []*Exam
	// ExamHook is the signature for custom Exam hook methods
	ExamHook func(context.Context, boil.ContextExecutor, *Exam) error

	examQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	examType                 = reflect.TypeOf(&Exam{})
	examMapping              = queries.MakeStructMapping(examType)
	examPrimaryKeyMapping, _ = queries.BindMapping(examType, examMapping, examPrimaryKeyColumns)
	examInsertCacheMut       sync.RWMutex
	examInsertCache          = make(map[string]insertCache)
	examUpdateCacheMut       sync.RWMutex
	examUpdateCache          = make(map[string]updateCache)
	examUpsertCacheMut       sync.RWMutex
	examUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var examAfterSelectHooks []ExamHook

var examBeforeInsertHooks []ExamHook
var examAfterInsertHooks []ExamHook

var examBeforeUpdateHooks []ExamHook
var examAfterUpdateHooks []ExamHook

var examBeforeDeleteHooks []ExamHook
var examAfterDeleteHooks []ExamHook

var examBeforeUpsertHooks []ExamHook
var examAfterUpsertHooks []ExamHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Exam) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Exam) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Exam) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Exam) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Exam) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Exam) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Exam) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Exam) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Exam) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExamHook registers your hook function for all future operations.
func AddExamHook(hookPoint boil.HookPoint, examHook ExamHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		examAfterSelectHooks = append(examAfterSelectHooks, examHook)
	case boil.BeforeInsertHook:
		examBeforeInsertHooks = append(examBeforeInsertHooks, examHook)
	case boil.AfterInsertHook:
		examAfterInsertHooks = append(examAfterInsertHooks, examHook)
	case boil.BeforeUpdateHook:
		examBeforeUpdateHooks = append(examBeforeUpdateHooks, examHook)
	case boil.AfterUpdateHook:
		examAfterUpdateHooks = append(examAfterUpdateHooks, examHook)
	case boil.BeforeDeleteHook:
		examBeforeDeleteHooks = append(examBeforeDeleteHooks, examHook)
	case boil.AfterDeleteHook:
		examAfterDeleteHooks = append(examAfterDeleteHooks, examHook)
	case boil.BeforeUpsertHook:
		examBeforeUpsertHooks = append(examBeforeUpsertHooks, examHook)
	case boil.AfterUpsertHook:
		examAfterUpsertHooks = append(examAfterUpsertHooks, examHook)
	}
}

// One returns a single exam record from the query.
func (q examQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Exam, error) {
	o := &Exam{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exam")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Exam records from the query.
func (q examQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExamSlice, error) {
	var o []*Exam

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Exam slice")
	}

	if len(examAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Exam records in the query.
func (q examQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exam rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q examQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exam exists")
	}

	return count > 0, nil
}

// Course pointed to by the foreign key.
func (o *Exam) Course(mods ...qm.QueryMod) courseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CourseID),
	}

	queryMods = append(queryMods, mods...)

	return Courses(queryMods...)
}

// Creator pointed to by the foreign key.
func (o *Exam) Creator(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CreatorID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Certificates retrieves all the certificate's Certificates with an executor.
func (o *Exam) Certificates(mods ...qm.QueryMod) certificateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`certificate`.`exam_id`=?", o.ID),
	)

	return Certificates(queryMods...)
}

// Files retrieves all the file's Files with an executor.
func (o *Exam) Files(mods ...qm.QueryMod) fileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`exam_has_files` on `file`.`id` = `exam_has_files`.`file_id`"),
		qm.Where("`exam_has_files`.`exam_id`=?", o.ID),
	)

	return Files(queryMods...)
}

// UserHasExams retrieves all the user_has_exam's UserHasExams with an executor.
func (o *Exam) UserHasExams(mods ...qm.QueryMod) userHasExamQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_has_exam`.`exam_id`=?", o.ID),
	)

	return UserHasExams(queryMods...)
}

// LoadCourse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examL) LoadCourse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExam interface{}, mods queries.Applicator) error {
	var slice []*Exam
	var object *Exam

	if singular {
		object = maybeExam.(*Exam)
	} else {
		slice = *maybeExam.(*[]*Exam)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examR{}
		}
		args = append(args, object.CourseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examR{}
			}

			for _, a := range args {
				if a == obj.CourseID {
					continue Outer
				}
			}

			args = append(args, obj.CourseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`course`),
		qm.WhereIn(`course.id in ?`, args...),
		qmhelper.WhereIsNull(`course.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Course")
	}

	var resultSlice []*Course
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for course")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course")
	}

	if len(examAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Course = foreign
		if foreign.R == nil {
			foreign.R = &courseR{}
		}
		foreign.R.Exams = append(foreign.R.Exams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CourseID == foreign.ID {
				local.R.Course = foreign
				if foreign.R == nil {
					foreign.R = &courseR{}
				}
				foreign.R.Exams = append(foreign.R.Exams, local)
				break
			}
		}
	}

	return nil
}

// LoadCreator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examL) LoadCreator(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExam interface{}, mods queries.Applicator) error {
	var slice []*Exam
	var object *Exam

	if singular {
		object = maybeExam.(*Exam)
	} else {
		slice = *maybeExam.(*[]*Exam)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examR{}
		}
		args = append(args, object.CreatorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examR{}
			}

			for _, a := range args {
				if a == obj.CreatorID {
					continue Outer
				}
			}

			args = append(args, obj.CreatorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(examAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Creator = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatorExams = append(foreign.R.CreatorExams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatorID == foreign.ID {
				local.R.Creator = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatorExams = append(foreign.R.CreatorExams, local)
				break
			}
		}
	}

	return nil
}

// LoadCertificates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (examL) LoadCertificates(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExam interface{}, mods queries.Applicator) error {
	var slice []*Exam
	var object *Exam

	if singular {
		object = maybeExam.(*Exam)
	} else {
		slice = *maybeExam.(*[]*Exam)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`certificate`),
		qm.WhereIn(`certificate.exam_id in ?`, args...),
		qmhelper.WhereIsNull(`certificate.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load certificate")
	}

	var resultSlice []*Certificate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice certificate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on certificate")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for certificate")
	}

	if len(certificateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Certificates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &certificateR{}
			}
			foreign.R.Exam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ExamID) {
				local.R.Certificates = append(local.R.Certificates, foreign)
				if foreign.R == nil {
					foreign.R = &certificateR{}
				}
				foreign.R.Exam = local
				break
			}
		}
	}

	return nil
}

// LoadFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (examL) LoadFiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExam interface{}, mods queries.Applicator) error {
	var slice []*Exam
	var object *Exam

	if singular {
		object = maybeExam.(*Exam)
	} else {
		slice = *maybeExam.(*[]*Exam)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`file`.`id`, `file`.`name`, `file`.`uri`, `file`.`local`, `file`.`uploader_id`, `file`.`created_at`, `file`.`deleted_at`, `a`.`exam_id`"),
		qm.From("`file`"),
		qm.InnerJoin("`exam_has_files` as `a` on `file`.`id` = `a`.`file_id`"),
		qm.WhereIn("`a`.`exam_id` in ?", args...),
		qmhelper.WhereIsNull("`file`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load file")
	}

	var resultSlice []*File

	var localJoinCols []int
	for results.Next() {
		one := new(File)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.URI, &one.Local, &one.UploaderID, &one.CreatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for file")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice file")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on file")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for file")
	}

	if len(fileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Files = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fileR{}
			}
			foreign.R.Exams = append(foreign.R.Exams, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Files = append(local.R.Files, foreign)
				if foreign.R == nil {
					foreign.R = &fileR{}
				}
				foreign.R.Exams = append(foreign.R.Exams, local)
				break
			}
		}
	}

	return nil
}

// LoadUserHasExams allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (examL) LoadUserHasExams(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExam interface{}, mods queries.Applicator) error {
	var slice []*Exam
	var object *Exam

	if singular {
		object = maybeExam.(*Exam)
	} else {
		slice = *maybeExam.(*[]*Exam)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_has_exam`),
		qm.WhereIn(`user_has_exam.exam_id in ?`, args...),
		qmhelper.WhereIsNull(`user_has_exam.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_has_exam")
	}

	var resultSlice []*UserHasExam
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_has_exam")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_has_exam")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_has_exam")
	}

	if len(userHasExamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserHasExams = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userHasExamR{}
			}
			foreign.R.Exam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExamID {
				local.R.UserHasExams = append(local.R.UserHasExams, foreign)
				if foreign.R == nil {
					foreign.R = &userHasExamR{}
				}
				foreign.R.Exam = local
				break
			}
		}
	}

	return nil
}

// SetCourse of the exam to the related item.
// Sets o.R.Course to related.
// Adds o to related.R.Exams.
func (o *Exam) SetCourse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Course) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `exam` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"course_id"}),
		strmangle.WhereClause("`", "`", 0, examPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CourseID = related.ID
	if o.R == nil {
		o.R = &examR{
			Course: related,
		}
	} else {
		o.R.Course = related
	}

	if related.R == nil {
		related.R = &courseR{
			Exams: ExamSlice{o},
		}
	} else {
		related.R.Exams = append(related.R.Exams, o)
	}

	return nil
}

// SetCreator of the exam to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.CreatorExams.
func (o *Exam) SetCreator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `exam` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"creator_id"}),
		strmangle.WhereClause("`", "`", 0, examPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatorID = related.ID
	if o.R == nil {
		o.R = &examR{
			Creator: related,
		}
	} else {
		o.R.Creator = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatorExams: ExamSlice{o},
		}
	} else {
		related.R.CreatorExams = append(related.R.CreatorExams, o)
	}

	return nil
}

// AddCertificates adds the given related objects to the existing relationships
// of the exam, optionally inserting them as new records.
// Appends related to o.R.Certificates.
// Sets related.R.Exam appropriately.
func (o *Exam) AddCertificates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Certificate) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ExamID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `certificate` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"exam_id"}),
				strmangle.WhereClause("`", "`", 0, certificatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ExamID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &examR{
			Certificates: related,
		}
	} else {
		o.R.Certificates = append(o.R.Certificates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &certificateR{
				Exam: o,
			}
		} else {
			rel.R.Exam = o
		}
	}
	return nil
}

// SetCertificates removes all previously related items of the
// exam replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Exam's Certificates accordingly.
// Replaces o.R.Certificates with related.
// Sets related.R.Exam's Certificates accordingly.
func (o *Exam) SetCertificates(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Certificate) error {
	query := "update `certificate` set `exam_id` = null where `exam_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Certificates {
			queries.SetScanner(&rel.ExamID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Exam = nil
		}
		o.R.Certificates = nil
	}

	return o.AddCertificates(ctx, exec, insert, related...)
}

// RemoveCertificates relationships from objects passed in.
// Removes related items from R.Certificates (uses pointer comparison, removal does not keep order)
// Sets related.R.Exam.
func (o *Exam) RemoveCertificates(ctx context.Context, exec boil.ContextExecutor, related ...*Certificate) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ExamID, nil)
		if rel.R != nil {
			rel.R.Exam = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("exam_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Certificates {
			if rel != ri {
				continue
			}

			ln := len(o.R.Certificates)
			if ln > 1 && i < ln-1 {
				o.R.Certificates[i] = o.R.Certificates[ln-1]
			}
			o.R.Certificates = o.R.Certificates[:ln-1]
			break
		}
	}

	return nil
}

// AddFiles adds the given related objects to the existing relationships
// of the exam, optionally inserting them as new records.
// Appends related to o.R.Files.
// Sets related.R.Exams appropriately.
func (o *Exam) AddFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*File) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `exam_has_files` (`exam_id`, `file_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &examR{
			Files: related,
		}
	} else {
		o.R.Files = append(o.R.Files, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fileR{
				Exams: ExamSlice{o},
			}
		} else {
			rel.R.Exams = append(rel.R.Exams, o)
		}
	}
	return nil
}

// SetFiles removes all previously related items of the
// exam replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Exams's Files accordingly.
// Replaces o.R.Files with related.
// Sets related.R.Exams's Files accordingly.
func (o *Exam) SetFiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*File) error {
	query := "delete from `exam_has_files` where `exam_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeFilesFromExamsSlice(o, related)
	if o.R != nil {
		o.R.Files = nil
	}

	return o.AddFiles(ctx, exec, insert, related...)
}

// RemoveFiles relationships from objects passed in.
// Removes related items from R.Files (uses pointer comparison, removal does not keep order)
// Sets related.R.Exams.
func (o *Exam) RemoveFiles(ctx context.Context, exec boil.ContextExecutor, related ...*File) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `exam_has_files` where `exam_id` = ? and `file_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeFilesFromExamsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Files {
			if rel != ri {
				continue
			}

			ln := len(o.R.Files)
			if ln > 1 && i < ln-1 {
				o.R.Files[i] = o.R.Files[ln-1]
			}
			o.R.Files = o.R.Files[:ln-1]
			break
		}
	}

	return nil
}

func removeFilesFromExamsSlice(o *Exam, related []*File) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Exams {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Exams)
			if ln > 1 && i < ln-1 {
				rel.R.Exams[i] = rel.R.Exams[ln-1]
			}
			rel.R.Exams = rel.R.Exams[:ln-1]
			break
		}
	}
}

// AddUserHasExams adds the given related objects to the existing relationships
// of the exam, optionally inserting them as new records.
// Appends related to o.R.UserHasExams.
// Sets related.R.Exam appropriately.
func (o *Exam) AddUserHasExams(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserHasExam) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExamID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_has_exam` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"exam_id"}),
				strmangle.WhereClause("`", "`", 0, userHasExamPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.ExamID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &examR{
			UserHasExams: related,
		}
	} else {
		o.R.UserHasExams = append(o.R.UserHasExams, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userHasExamR{
				Exam: o,
			}
		} else {
			rel.R.Exam = o
		}
	}
	return nil
}

// Exams retrieves all the records using an executor.
func Exams(mods ...qm.QueryMod) examQuery {
	mods = append(mods, qm.From("`exam`"), qmhelper.WhereIsNull("`exam`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`exam`.*"})
	}

	return examQuery{q}
}

// FindExam retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExam(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Exam, error) {
	examObj := &Exam{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `exam` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, examObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exam")
	}

	if err = examObj.doAfterSelectHooks(ctx, exec); err != nil {
		return examObj, err
	}

	return examObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Exam) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exam provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	examInsertCacheMut.RLock()
	cache, cached := examInsertCache[key]
	examInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			examAllColumns,
			examColumnsWithDefault,
			examColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(examType, examMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(examType, examMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `exam` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `exam` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `exam` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, examPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exam")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == examMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for exam")
	}

CacheNoHooks:
	if !cached {
		examInsertCacheMut.Lock()
		examInsertCache[key] = cache
		examInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Exam.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Exam) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	examUpdateCacheMut.RLock()
	cache, cached := examUpdateCache[key]
	examUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			examAllColumns,
			examPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update exam, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `exam` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, examPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(examType, examMapping, append(wl, examPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update exam row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for exam")
	}

	if !cached {
		examUpdateCacheMut.Lock()
		examUpdateCache[key] = cache
		examUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q examQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for exam")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for exam")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExamSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `exam` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, examPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in exam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all exam")
	}
	return rowsAff, nil
}

var mySQLExamUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Exam) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exam provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLExamUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	examUpsertCacheMut.RLock()
	cache, cached := examUpsertCache[key]
	examUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			examAllColumns,
			examColumnsWithDefault,
			examColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			examAllColumns,
			examPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert exam, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`exam`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `exam` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(examType, examMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(examType, examMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for exam")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == examMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(examType, examMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for exam")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for exam")
	}

CacheNoHooks:
	if !cached {
		examUpsertCacheMut.Lock()
		examUpsertCache[key] = cache
		examUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Exam record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Exam) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Exam provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), examPrimaryKeyMapping)
		sql = "DELETE FROM `exam` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `exam` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(examType, examMapping, append(wl, examPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from exam")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for exam")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q examQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no examQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exam")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exam")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExamSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(examBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `exam` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, examPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `exam` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, examPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exam slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exam")
	}

	if len(examAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Exam) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExam(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExamSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `exam`.* FROM `exam` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, examPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExamSlice")
	}

	*o = slice

	return nil
}

// ExamExists checks if the Exam row exists.
func ExamExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `exam` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exam exists")
	}

	return exists, nil
}

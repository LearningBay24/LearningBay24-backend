// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GraduationLevel is an object representing the database table.
type GraduationLevel struct {
	ID              int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	GraduationLevel string `boil:"graduation_level" json:"graduation_level" toml:"graduation_level" yaml:"graduation_level"`
	// Level (or "rank") of the graduation compared to others. Ranks with the a similar "meaning" should get the same level.
	Level int `boil:"level" json:"level" toml:"level" yaml:"level"`

	R *graduationLevelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L graduationLevelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GraduationLevelColumns = struct {
	ID              string
	GraduationLevel string
	Level           string
}{
	ID:              "id",
	GraduationLevel: "graduation_level",
	Level:           "level",
}

var GraduationLevelTableColumns = struct {
	ID              string
	GraduationLevel string
	Level           string
}{
	ID:              "graduation_level.id",
	GraduationLevel: "graduation_level.graduation_level",
	Level:           "graduation_level.level",
}

// Generated where

var GraduationLevelWhere = struct {
	ID              whereHelperint
	GraduationLevel whereHelperstring
	Level           whereHelperint
}{
	ID:              whereHelperint{field: "`graduation_level`.`id`"},
	GraduationLevel: whereHelperstring{field: "`graduation_level`.`graduation_level`"},
	Level:           whereHelperint{field: "`graduation_level`.`level`"},
}

// GraduationLevelRels is where relationship names are stored.
var GraduationLevelRels = struct {
	Users string
}{
	Users: "Users",
}

// graduationLevelR is where relationships are stored.
type graduationLevelR struct {
	Users UserSlice `boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*graduationLevelR) NewStruct() *graduationLevelR {
	return &graduationLevelR{}
}

func (r *graduationLevelR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// graduationLevelL is where Load methods for each relationship are stored.
type graduationLevelL struct{}

var (
	graduationLevelAllColumns            = []string{"id", "graduation_level", "level"}
	graduationLevelColumnsWithoutDefault = []string{"graduation_level", "level"}
	graduationLevelColumnsWithDefault    = []string{"id"}
	graduationLevelPrimaryKeyColumns     = []string{"id"}
	graduationLevelGeneratedColumns      = []string{}
)

type (
	// GraduationLevelSlice is an alias for a slice of pointers to GraduationLevel.
	// This should almost always be used instead of []GraduationLevel.
	GraduationLevelSlice []*GraduationLevel
	// GraduationLevelHook is the signature for custom GraduationLevel hook methods
	GraduationLevelHook func(context.Context, boil.ContextExecutor, *GraduationLevel) error

	graduationLevelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	graduationLevelType                 = reflect.TypeOf(&GraduationLevel{})
	graduationLevelMapping              = queries.MakeStructMapping(graduationLevelType)
	graduationLevelPrimaryKeyMapping, _ = queries.BindMapping(graduationLevelType, graduationLevelMapping, graduationLevelPrimaryKeyColumns)
	graduationLevelInsertCacheMut       sync.RWMutex
	graduationLevelInsertCache          = make(map[string]insertCache)
	graduationLevelUpdateCacheMut       sync.RWMutex
	graduationLevelUpdateCache          = make(map[string]updateCache)
	graduationLevelUpsertCacheMut       sync.RWMutex
	graduationLevelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var graduationLevelAfterSelectHooks []GraduationLevelHook

var graduationLevelBeforeInsertHooks []GraduationLevelHook
var graduationLevelAfterInsertHooks []GraduationLevelHook

var graduationLevelBeforeUpdateHooks []GraduationLevelHook
var graduationLevelAfterUpdateHooks []GraduationLevelHook

var graduationLevelBeforeDeleteHooks []GraduationLevelHook
var graduationLevelAfterDeleteHooks []GraduationLevelHook

var graduationLevelBeforeUpsertHooks []GraduationLevelHook
var graduationLevelAfterUpsertHooks []GraduationLevelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GraduationLevel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range graduationLevelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GraduationLevel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range graduationLevelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GraduationLevel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range graduationLevelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GraduationLevel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range graduationLevelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GraduationLevel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range graduationLevelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GraduationLevel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range graduationLevelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GraduationLevel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range graduationLevelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GraduationLevel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range graduationLevelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GraduationLevel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range graduationLevelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGraduationLevelHook registers your hook function for all future operations.
func AddGraduationLevelHook(hookPoint boil.HookPoint, graduationLevelHook GraduationLevelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		graduationLevelAfterSelectHooks = append(graduationLevelAfterSelectHooks, graduationLevelHook)
	case boil.BeforeInsertHook:
		graduationLevelBeforeInsertHooks = append(graduationLevelBeforeInsertHooks, graduationLevelHook)
	case boil.AfterInsertHook:
		graduationLevelAfterInsertHooks = append(graduationLevelAfterInsertHooks, graduationLevelHook)
	case boil.BeforeUpdateHook:
		graduationLevelBeforeUpdateHooks = append(graduationLevelBeforeUpdateHooks, graduationLevelHook)
	case boil.AfterUpdateHook:
		graduationLevelAfterUpdateHooks = append(graduationLevelAfterUpdateHooks, graduationLevelHook)
	case boil.BeforeDeleteHook:
		graduationLevelBeforeDeleteHooks = append(graduationLevelBeforeDeleteHooks, graduationLevelHook)
	case boil.AfterDeleteHook:
		graduationLevelAfterDeleteHooks = append(graduationLevelAfterDeleteHooks, graduationLevelHook)
	case boil.BeforeUpsertHook:
		graduationLevelBeforeUpsertHooks = append(graduationLevelBeforeUpsertHooks, graduationLevelHook)
	case boil.AfterUpsertHook:
		graduationLevelAfterUpsertHooks = append(graduationLevelAfterUpsertHooks, graduationLevelHook)
	}
}

// One returns a single graduationLevel record from the query.
func (q graduationLevelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GraduationLevel, error) {
	o := &GraduationLevel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for graduation_level")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GraduationLevel records from the query.
func (q graduationLevelQuery) All(ctx context.Context, exec boil.ContextExecutor) (GraduationLevelSlice, error) {
	var o []*GraduationLevel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GraduationLevel slice")
	}

	if len(graduationLevelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GraduationLevel records in the query.
func (q graduationLevelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count graduation_level rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q graduationLevelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if graduation_level exists")
	}

	return count > 0, nil
}

// Users retrieves all the user's Users with an executor.
func (o *GraduationLevel) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user`.`graduation_level`=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (graduationLevelL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGraduationLevel interface{}, mods queries.Applicator) error {
	var slice []*GraduationLevel
	var object *GraduationLevel

	if singular {
		object = maybeGraduationLevel.(*GraduationLevel)
	} else {
		slice = *maybeGraduationLevel.(*[]*GraduationLevel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &graduationLevelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &graduationLevelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.graduation_level in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.UserGraduationLevel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GraduationLevel) {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserGraduationLevel = local
				break
			}
		}
	}

	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the graduation_level, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.UserGraduationLevel appropriately.
func (o *GraduationLevel) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GraduationLevel, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"graduation_level"}),
				strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GraduationLevel, o.ID)
		}
	}

	if o.R == nil {
		o.R = &graduationLevelR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				UserGraduationLevel: o,
			}
		} else {
			rel.R.UserGraduationLevel = o
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// graduation_level replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UserGraduationLevel's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.UserGraduationLevel's Users accordingly.
func (o *GraduationLevel) SetUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update `user` set `graduation_level` = null where `graduation_level` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Users {
			queries.SetScanner(&rel.GraduationLevel, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UserGraduationLevel = nil
		}
		o.R.Users = nil
	}

	return o.AddUsers(ctx, exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.UserGraduationLevel.
func (o *GraduationLevel) RemoveUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GraduationLevel, nil)
		if rel.R != nil {
			rel.R.UserGraduationLevel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("graduation_level")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

// GraduationLevels retrieves all the records using an executor.
func GraduationLevels(mods ...qm.QueryMod) graduationLevelQuery {
	mods = append(mods, qm.From("`graduation_level`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`graduation_level`.*"})
	}

	return graduationLevelQuery{q}
}

// FindGraduationLevel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGraduationLevel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GraduationLevel, error) {
	graduationLevelObj := &GraduationLevel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `graduation_level` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, graduationLevelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from graduation_level")
	}

	if err = graduationLevelObj.doAfterSelectHooks(ctx, exec); err != nil {
		return graduationLevelObj, err
	}

	return graduationLevelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GraduationLevel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no graduation_level provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(graduationLevelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	graduationLevelInsertCacheMut.RLock()
	cache, cached := graduationLevelInsertCache[key]
	graduationLevelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			graduationLevelAllColumns,
			graduationLevelColumnsWithDefault,
			graduationLevelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(graduationLevelType, graduationLevelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(graduationLevelType, graduationLevelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `graduation_level` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `graduation_level` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `graduation_level` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, graduationLevelPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into graduation_level")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == graduationLevelMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for graduation_level")
	}

CacheNoHooks:
	if !cached {
		graduationLevelInsertCacheMut.Lock()
		graduationLevelInsertCache[key] = cache
		graduationLevelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GraduationLevel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GraduationLevel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	graduationLevelUpdateCacheMut.RLock()
	cache, cached := graduationLevelUpdateCache[key]
	graduationLevelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			graduationLevelAllColumns,
			graduationLevelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update graduation_level, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `graduation_level` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, graduationLevelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(graduationLevelType, graduationLevelMapping, append(wl, graduationLevelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update graduation_level row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for graduation_level")
	}

	if !cached {
		graduationLevelUpdateCacheMut.Lock()
		graduationLevelUpdateCache[key] = cache
		graduationLevelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q graduationLevelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for graduation_level")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for graduation_level")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GraduationLevelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), graduationLevelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `graduation_level` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, graduationLevelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in graduationLevel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all graduationLevel")
	}
	return rowsAff, nil
}

var mySQLGraduationLevelUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GraduationLevel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no graduation_level provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(graduationLevelColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGraduationLevelUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	graduationLevelUpsertCacheMut.RLock()
	cache, cached := graduationLevelUpsertCache[key]
	graduationLevelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			graduationLevelAllColumns,
			graduationLevelColumnsWithDefault,
			graduationLevelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			graduationLevelAllColumns,
			graduationLevelPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert graduation_level, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`graduation_level`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `graduation_level` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(graduationLevelType, graduationLevelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(graduationLevelType, graduationLevelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for graduation_level")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == graduationLevelMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(graduationLevelType, graduationLevelMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for graduation_level")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for graduation_level")
	}

CacheNoHooks:
	if !cached {
		graduationLevelUpsertCacheMut.Lock()
		graduationLevelUpsertCache[key] = cache
		graduationLevelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GraduationLevel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GraduationLevel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GraduationLevel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), graduationLevelPrimaryKeyMapping)
	sql := "DELETE FROM `graduation_level` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from graduation_level")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for graduation_level")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q graduationLevelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no graduationLevelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from graduation_level")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for graduation_level")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GraduationLevelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(graduationLevelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), graduationLevelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `graduation_level` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, graduationLevelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from graduationLevel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for graduation_level")
	}

	if len(graduationLevelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GraduationLevel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGraduationLevel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GraduationLevelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GraduationLevelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), graduationLevelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `graduation_level`.* FROM `graduation_level` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, graduationLevelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GraduationLevelSlice")
	}

	*o = slice

	return nil
}

// GraduationLevelExists checks if the GraduationLevel row exists.
func GraduationLevelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `graduation_level` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if graduation_level exists")
	}

	return exists, nil
}

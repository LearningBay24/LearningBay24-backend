// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FieldOfStudy is an object representing the database table.
type FieldOfStudy struct {
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Name of the field of study.
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Semesters null.Int    `boil:"semesters" json:"semesters,omitempty" toml:"semesters" yaml:"semesters,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *fieldOfStudyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fieldOfStudyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FieldOfStudyColumns = struct {
	ID        string
	Name      string
	Semesters string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	Semesters: "semesters",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var FieldOfStudyTableColumns = struct {
	ID        string
	Name      string
	Semesters string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "field_of_study.id",
	Name:      "field_of_study.name",
	Semesters: "field_of_study.semesters",
	CreatedAt: "field_of_study.created_at",
	UpdatedAt: "field_of_study.updated_at",
	DeletedAt: "field_of_study.deleted_at",
}

// Generated where

var FieldOfStudyWhere = struct {
	ID        whereHelperint
	Name      whereHelpernull_String
	Semesters whereHelpernull_Int
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "`field_of_study`.`id`"},
	Name:      whereHelpernull_String{field: "`field_of_study`.`name`"},
	Semesters: whereHelpernull_Int{field: "`field_of_study`.`semesters`"},
	CreatedAt: whereHelpertime_Time{field: "`field_of_study`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`field_of_study`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`field_of_study`.`deleted_at`"},
}

// FieldOfStudyRels is where relationship names are stored.
var FieldOfStudyRels = struct {
	FieldOfStudyHasCourses string
	Users                  string
}{
	FieldOfStudyHasCourses: "FieldOfStudyHasCourses",
	Users:                  "Users",
}

// fieldOfStudyR is where relationships are stored.
type fieldOfStudyR struct {
	FieldOfStudyHasCourses FieldOfStudyHasCourseSlice `boil:"FieldOfStudyHasCourses" json:"FieldOfStudyHasCourses" toml:"FieldOfStudyHasCourses" yaml:"FieldOfStudyHasCourses"`
	Users                  UserSlice                  `boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*fieldOfStudyR) NewStruct() *fieldOfStudyR {
	return &fieldOfStudyR{}
}

func (r *fieldOfStudyR) GetFieldOfStudyHasCourses() FieldOfStudyHasCourseSlice {
	if r == nil {
		return nil
	}
	return r.FieldOfStudyHasCourses
}

func (r *fieldOfStudyR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// fieldOfStudyL is where Load methods for each relationship are stored.
type fieldOfStudyL struct{}

var (
	fieldOfStudyAllColumns            = []string{"id", "name", "semesters", "created_at", "updated_at", "deleted_at"}
	fieldOfStudyColumnsWithoutDefault = []string{"name", "updated_at", "deleted_at"}
	fieldOfStudyColumnsWithDefault    = []string{"id", "semesters", "created_at"}
	fieldOfStudyPrimaryKeyColumns     = []string{"id"}
	fieldOfStudyGeneratedColumns      = []string{}
)

type (
	// FieldOfStudySlice is an alias for a slice of pointers to FieldOfStudy.
	// This should almost always be used instead of []FieldOfStudy.
	FieldOfStudySlice []*FieldOfStudy
	// FieldOfStudyHook is the signature for custom FieldOfStudy hook methods
	FieldOfStudyHook func(context.Context, boil.ContextExecutor, *FieldOfStudy) error

	fieldOfStudyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fieldOfStudyType                 = reflect.TypeOf(&FieldOfStudy{})
	fieldOfStudyMapping              = queries.MakeStructMapping(fieldOfStudyType)
	fieldOfStudyPrimaryKeyMapping, _ = queries.BindMapping(fieldOfStudyType, fieldOfStudyMapping, fieldOfStudyPrimaryKeyColumns)
	fieldOfStudyInsertCacheMut       sync.RWMutex
	fieldOfStudyInsertCache          = make(map[string]insertCache)
	fieldOfStudyUpdateCacheMut       sync.RWMutex
	fieldOfStudyUpdateCache          = make(map[string]updateCache)
	fieldOfStudyUpsertCacheMut       sync.RWMutex
	fieldOfStudyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fieldOfStudyAfterSelectHooks []FieldOfStudyHook

var fieldOfStudyBeforeInsertHooks []FieldOfStudyHook
var fieldOfStudyAfterInsertHooks []FieldOfStudyHook

var fieldOfStudyBeforeUpdateHooks []FieldOfStudyHook
var fieldOfStudyAfterUpdateHooks []FieldOfStudyHook

var fieldOfStudyBeforeDeleteHooks []FieldOfStudyHook
var fieldOfStudyAfterDeleteHooks []FieldOfStudyHook

var fieldOfStudyBeforeUpsertHooks []FieldOfStudyHook
var fieldOfStudyAfterUpsertHooks []FieldOfStudyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FieldOfStudy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FieldOfStudy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FieldOfStudy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FieldOfStudy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FieldOfStudy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FieldOfStudy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FieldOfStudy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FieldOfStudy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FieldOfStudy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fieldOfStudyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFieldOfStudyHook registers your hook function for all future operations.
func AddFieldOfStudyHook(hookPoint boil.HookPoint, fieldOfStudyHook FieldOfStudyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fieldOfStudyAfterSelectHooks = append(fieldOfStudyAfterSelectHooks, fieldOfStudyHook)
	case boil.BeforeInsertHook:
		fieldOfStudyBeforeInsertHooks = append(fieldOfStudyBeforeInsertHooks, fieldOfStudyHook)
	case boil.AfterInsertHook:
		fieldOfStudyAfterInsertHooks = append(fieldOfStudyAfterInsertHooks, fieldOfStudyHook)
	case boil.BeforeUpdateHook:
		fieldOfStudyBeforeUpdateHooks = append(fieldOfStudyBeforeUpdateHooks, fieldOfStudyHook)
	case boil.AfterUpdateHook:
		fieldOfStudyAfterUpdateHooks = append(fieldOfStudyAfterUpdateHooks, fieldOfStudyHook)
	case boil.BeforeDeleteHook:
		fieldOfStudyBeforeDeleteHooks = append(fieldOfStudyBeforeDeleteHooks, fieldOfStudyHook)
	case boil.AfterDeleteHook:
		fieldOfStudyAfterDeleteHooks = append(fieldOfStudyAfterDeleteHooks, fieldOfStudyHook)
	case boil.BeforeUpsertHook:
		fieldOfStudyBeforeUpsertHooks = append(fieldOfStudyBeforeUpsertHooks, fieldOfStudyHook)
	case boil.AfterUpsertHook:
		fieldOfStudyAfterUpsertHooks = append(fieldOfStudyAfterUpsertHooks, fieldOfStudyHook)
	}
}

// One returns a single fieldOfStudy record from the query.
func (q fieldOfStudyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FieldOfStudy, error) {
	o := &FieldOfStudy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for field_of_study")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FieldOfStudy records from the query.
func (q fieldOfStudyQuery) All(ctx context.Context, exec boil.ContextExecutor) (FieldOfStudySlice, error) {
	var o []*FieldOfStudy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FieldOfStudy slice")
	}

	if len(fieldOfStudyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FieldOfStudy records in the query.
func (q fieldOfStudyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count field_of_study rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fieldOfStudyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if field_of_study exists")
	}

	return count > 0, nil
}

// FieldOfStudyHasCourses retrieves all the field_of_study_has_course's FieldOfStudyHasCourses with an executor.
func (o *FieldOfStudy) FieldOfStudyHasCourses(mods ...qm.QueryMod) fieldOfStudyHasCourseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`field_of_study_has_course`.`field_of_study_id`=?", o.ID),
	)

	return FieldOfStudyHasCourses(queryMods...)
}

// Users retrieves all the user's Users with an executor.
func (o *FieldOfStudy) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`user_has_field_of_study` on `user`.`id` = `user_has_field_of_study`.`user_id`"),
		qm.Where("`user_has_field_of_study`.`field_of_study_id`=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadFieldOfStudyHasCourses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fieldOfStudyL) LoadFieldOfStudyHasCourses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFieldOfStudy interface{}, mods queries.Applicator) error {
	var slice []*FieldOfStudy
	var object *FieldOfStudy

	if singular {
		object = maybeFieldOfStudy.(*FieldOfStudy)
	} else {
		slice = *maybeFieldOfStudy.(*[]*FieldOfStudy)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fieldOfStudyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fieldOfStudyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`field_of_study_has_course`),
		qm.WhereIn(`field_of_study_has_course.field_of_study_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load field_of_study_has_course")
	}

	var resultSlice []*FieldOfStudyHasCourse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice field_of_study_has_course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on field_of_study_has_course")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for field_of_study_has_course")
	}

	if len(fieldOfStudyHasCourseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FieldOfStudyHasCourses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fieldOfStudyHasCourseR{}
			}
			foreign.R.FieldOfStudy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FieldOfStudyID {
				local.R.FieldOfStudyHasCourses = append(local.R.FieldOfStudyHasCourses, foreign)
				if foreign.R == nil {
					foreign.R = &fieldOfStudyHasCourseR{}
				}
				foreign.R.FieldOfStudy = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fieldOfStudyL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFieldOfStudy interface{}, mods queries.Applicator) error {
	var slice []*FieldOfStudy
	var object *FieldOfStudy

	if singular {
		object = maybeFieldOfStudy.(*FieldOfStudy)
	} else {
		slice = *maybeFieldOfStudy.(*[]*FieldOfStudy)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fieldOfStudyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fieldOfStudyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`user`.`id`, `user`.`title`, `user`.`firstname`, `user`.`surname`, `user`.`email`, `user`.`password`, `user`.`role_id`, `user`.`graduation_level`, `user`.`semester`, `user`.`phone_number`, `user`.`residence`, `user`.`profile_picture`, `user`.`biography`, `user`.`preferred_language_id`, `user`.`created_at`, `user`.`updated_at`, `user`.`deleted_at`, `a`.`field_of_study_id`"),
		qm.From("`user`"),
		qm.InnerJoin("`user_has_field_of_study` as `a` on `user`.`id` = `a`.`user_id`"),
		qm.WhereIn("`a`.`field_of_study_id` in ?", args...),
		qmhelper.WhereIsNull("`user`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user")
	}

	var resultSlice []*User

	var localJoinCols []int
	for results.Next() {
		one := new(User)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Title, &one.Firstname, &one.Surname, &one.Email, &one.Password, &one.RoleID, &one.GraduationLevel, &one.Semester, &one.PhoneNumber, &one.Residence, &one.ProfilePicture, &one.Biography, &one.PreferredLanguageID, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for user")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice user")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.FieldOfStudies = append(foreign.R.FieldOfStudies, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FieldOfStudies = append(foreign.R.FieldOfStudies, local)
				break
			}
		}
	}

	return nil
}

// AddFieldOfStudyHasCourses adds the given related objects to the existing relationships
// of the field_of_study, optionally inserting them as new records.
// Appends related to o.R.FieldOfStudyHasCourses.
// Sets related.R.FieldOfStudy appropriately.
func (o *FieldOfStudy) AddFieldOfStudyHasCourses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FieldOfStudyHasCourse) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FieldOfStudyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `field_of_study_has_course` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"field_of_study_id"}),
				strmangle.WhereClause("`", "`", 0, fieldOfStudyHasCoursePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.FieldOfStudyID, rel.CourseID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FieldOfStudyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &fieldOfStudyR{
			FieldOfStudyHasCourses: related,
		}
	} else {
		o.R.FieldOfStudyHasCourses = append(o.R.FieldOfStudyHasCourses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fieldOfStudyHasCourseR{
				FieldOfStudy: o,
			}
		} else {
			rel.R.FieldOfStudy = o
		}
	}
	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the field_of_study, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.FieldOfStudies appropriately.
func (o *FieldOfStudy) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `user_has_field_of_study` (`field_of_study_id`, `user_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &fieldOfStudyR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				FieldOfStudies: FieldOfStudySlice{o},
			}
		} else {
			rel.R.FieldOfStudies = append(rel.R.FieldOfStudies, o)
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// field_of_study replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FieldOfStudies's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.FieldOfStudies's Users accordingly.
func (o *FieldOfStudy) SetUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from `user_has_field_of_study` where `field_of_study_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromFieldOfStudiesSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}

	return o.AddUsers(ctx, exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.FieldOfStudies.
func (o *FieldOfStudy) RemoveUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `user_has_field_of_study` where `field_of_study_id` = ? and `user_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromFieldOfStudiesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromFieldOfStudiesSlice(o *FieldOfStudy, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.FieldOfStudies {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.FieldOfStudies)
			if ln > 1 && i < ln-1 {
				rel.R.FieldOfStudies[i] = rel.R.FieldOfStudies[ln-1]
			}
			rel.R.FieldOfStudies = rel.R.FieldOfStudies[:ln-1]
			break
		}
	}
}

// FieldOfStudies retrieves all the records using an executor.
func FieldOfStudies(mods ...qm.QueryMod) fieldOfStudyQuery {
	mods = append(mods, qm.From("`field_of_study`"), qmhelper.WhereIsNull("`field_of_study`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`field_of_study`.*"})
	}

	return fieldOfStudyQuery{q}
}

// FindFieldOfStudy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFieldOfStudy(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FieldOfStudy, error) {
	fieldOfStudyObj := &FieldOfStudy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `field_of_study` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fieldOfStudyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from field_of_study")
	}

	if err = fieldOfStudyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return fieldOfStudyObj, err
	}

	return fieldOfStudyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FieldOfStudy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no field_of_study provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fieldOfStudyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fieldOfStudyInsertCacheMut.RLock()
	cache, cached := fieldOfStudyInsertCache[key]
	fieldOfStudyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fieldOfStudyAllColumns,
			fieldOfStudyColumnsWithDefault,
			fieldOfStudyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fieldOfStudyType, fieldOfStudyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fieldOfStudyType, fieldOfStudyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `field_of_study` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `field_of_study` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `field_of_study` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, fieldOfStudyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into field_of_study")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == fieldOfStudyMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for field_of_study")
	}

CacheNoHooks:
	if !cached {
		fieldOfStudyInsertCacheMut.Lock()
		fieldOfStudyInsertCache[key] = cache
		fieldOfStudyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FieldOfStudy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FieldOfStudy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fieldOfStudyUpdateCacheMut.RLock()
	cache, cached := fieldOfStudyUpdateCache[key]
	fieldOfStudyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fieldOfStudyAllColumns,
			fieldOfStudyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update field_of_study, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `field_of_study` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, fieldOfStudyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fieldOfStudyType, fieldOfStudyMapping, append(wl, fieldOfStudyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update field_of_study row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for field_of_study")
	}

	if !cached {
		fieldOfStudyUpdateCacheMut.Lock()
		fieldOfStudyUpdateCache[key] = cache
		fieldOfStudyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fieldOfStudyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for field_of_study")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for field_of_study")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FieldOfStudySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fieldOfStudyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `field_of_study` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fieldOfStudyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fieldOfStudy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fieldOfStudy")
	}
	return rowsAff, nil
}

var mySQLFieldOfStudyUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FieldOfStudy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no field_of_study provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fieldOfStudyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFieldOfStudyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fieldOfStudyUpsertCacheMut.RLock()
	cache, cached := fieldOfStudyUpsertCache[key]
	fieldOfStudyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fieldOfStudyAllColumns,
			fieldOfStudyColumnsWithDefault,
			fieldOfStudyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fieldOfStudyAllColumns,
			fieldOfStudyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert field_of_study, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`field_of_study`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `field_of_study` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(fieldOfStudyType, fieldOfStudyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fieldOfStudyType, fieldOfStudyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for field_of_study")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == fieldOfStudyMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(fieldOfStudyType, fieldOfStudyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for field_of_study")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for field_of_study")
	}

CacheNoHooks:
	if !cached {
		fieldOfStudyUpsertCacheMut.Lock()
		fieldOfStudyUpsertCache[key] = cache
		fieldOfStudyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FieldOfStudy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FieldOfStudy) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FieldOfStudy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fieldOfStudyPrimaryKeyMapping)
		sql = "DELETE FROM `field_of_study` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `field_of_study` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(fieldOfStudyType, fieldOfStudyMapping, append(wl, fieldOfStudyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from field_of_study")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for field_of_study")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fieldOfStudyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fieldOfStudyQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from field_of_study")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for field_of_study")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FieldOfStudySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fieldOfStudyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fieldOfStudyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `field_of_study` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fieldOfStudyPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fieldOfStudyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `field_of_study` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fieldOfStudyPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fieldOfStudy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for field_of_study")
	}

	if len(fieldOfStudyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FieldOfStudy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFieldOfStudy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FieldOfStudySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FieldOfStudySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fieldOfStudyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `field_of_study`.* FROM `field_of_study` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fieldOfStudyPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FieldOfStudySlice")
	}

	*o = slice

	return nil
}

// FieldOfStudyExists checks if the FieldOfStudy row exists.
func FieldOfStudyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `field_of_study` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if field_of_study exists")
	}

	return exists, nil
}

// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Certificate is an object representing the database table.
type Certificate struct { // UUID generated before insertion into the database.
	// Needs to be a randomly generated String of a specific format in order to avoid getting any desired certificate.
	ID             string `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID         int    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	LinkedCourseID int    `boil:"linked_course_id" json:"linked_course_id" toml:"linked_course_id" yaml:"linked_course_id"`
	// The exam (if any) that was passed in order to gain this certificate.
	ExamID    null.Int  `boil:"exam_id" json:"exam_id,omitempty" toml:"exam_id" yaml:"exam_id,omitempty"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *certificateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L certificateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CertificateColumns = struct {
	ID             string
	UserID         string
	LinkedCourseID string
	ExamID         string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	UserID:         "user_id",
	LinkedCourseID: "linked_course_id",
	ExamID:         "exam_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var CertificateTableColumns = struct {
	ID             string
	UserID         string
	LinkedCourseID string
	ExamID         string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "certificate.id",
	UserID:         "certificate.user_id",
	LinkedCourseID: "certificate.linked_course_id",
	ExamID:         "certificate.exam_id",
	CreatedAt:      "certificate.created_at",
	UpdatedAt:      "certificate.updated_at",
	DeletedAt:      "certificate.deleted_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CertificateWhere = struct {
	ID             whereHelperstring
	UserID         whereHelperint
	LinkedCourseID whereHelperint
	ExamID         whereHelpernull_Int
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "`certificate`.`id`"},
	UserID:         whereHelperint{field: "`certificate`.`user_id`"},
	LinkedCourseID: whereHelperint{field: "`certificate`.`linked_course_id`"},
	ExamID:         whereHelpernull_Int{field: "`certificate`.`exam_id`"},
	CreatedAt:      whereHelpernull_Time{field: "`certificate`.`created_at`"},
	UpdatedAt:      whereHelpernull_Time{field: "`certificate`.`updated_at`"},
	DeletedAt:      whereHelpernull_Time{field: "`certificate`.`deleted_at`"},
}

// CertificateRels is where relationship names are stored.
var CertificateRels = struct {
	LinkedCourse string
	Exam         string
	User         string
	Courses      string
}{
	LinkedCourse: "LinkedCourse",
	Exam:         "Exam",
	User:         "User",
	Courses:      "Courses",
}

// certificateR is where relationships are stored.
type certificateR struct {
	LinkedCourse *Course     `boil:"LinkedCourse" json:"LinkedCourse" toml:"LinkedCourse" yaml:"LinkedCourse"`
	Exam         *Exam       `boil:"Exam" json:"Exam" toml:"Exam" yaml:"Exam"`
	User         *User       `boil:"User" json:"User" toml:"User" yaml:"User"`
	Courses      CourseSlice `boil:"Courses" json:"Courses" toml:"Courses" yaml:"Courses"`
}

// NewStruct creates a new relationship struct
func (*certificateR) NewStruct() *certificateR {
	return &certificateR{}
}

func (r *certificateR) GetLinkedCourse() *Course {
	if r == nil {
		return nil
	}
	return r.LinkedCourse
}

func (r *certificateR) GetExam() *Exam {
	if r == nil {
		return nil
	}
	return r.Exam
}

func (r *certificateR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *certificateR) GetCourses() CourseSlice {
	if r == nil {
		return nil
	}
	return r.Courses
}

// certificateL is where Load methods for each relationship are stored.
type certificateL struct{}

var (
	certificateAllColumns            = []string{"id", "user_id", "linked_course_id", "exam_id", "created_at", "updated_at", "deleted_at"}
	certificateColumnsWithoutDefault = []string{"id", "user_id", "linked_course_id", "exam_id", "updated_at", "deleted_at"}
	certificateColumnsWithDefault    = []string{"created_at"}
	certificatePrimaryKeyColumns     = []string{"id"}
	certificateGeneratedColumns      = []string{}
)

type (
	// CertificateSlice is an alias for a slice of pointers to Certificate.
	// This should almost always be used instead of []Certificate.
	CertificateSlice []*Certificate
	// CertificateHook is the signature for custom Certificate hook methods
	CertificateHook func(context.Context, boil.ContextExecutor, *Certificate) error

	certificateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	certificateType                 = reflect.TypeOf(&Certificate{})
	certificateMapping              = queries.MakeStructMapping(certificateType)
	certificatePrimaryKeyMapping, _ = queries.BindMapping(certificateType, certificateMapping, certificatePrimaryKeyColumns)
	certificateInsertCacheMut       sync.RWMutex
	certificateInsertCache          = make(map[string]insertCache)
	certificateUpdateCacheMut       sync.RWMutex
	certificateUpdateCache          = make(map[string]updateCache)
	certificateUpsertCacheMut       sync.RWMutex
	certificateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var certificateAfterSelectHooks []CertificateHook

var certificateBeforeInsertHooks []CertificateHook
var certificateAfterInsertHooks []CertificateHook

var certificateBeforeUpdateHooks []CertificateHook
var certificateAfterUpdateHooks []CertificateHook

var certificateBeforeDeleteHooks []CertificateHook
var certificateAfterDeleteHooks []CertificateHook

var certificateBeforeUpsertHooks []CertificateHook
var certificateAfterUpsertHooks []CertificateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Certificate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range certificateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Certificate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range certificateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Certificate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range certificateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Certificate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range certificateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Certificate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range certificateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Certificate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range certificateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Certificate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range certificateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Certificate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range certificateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Certificate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range certificateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCertificateHook registers your hook function for all future operations.
func AddCertificateHook(hookPoint boil.HookPoint, certificateHook CertificateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		certificateAfterSelectHooks = append(certificateAfterSelectHooks, certificateHook)
	case boil.BeforeInsertHook:
		certificateBeforeInsertHooks = append(certificateBeforeInsertHooks, certificateHook)
	case boil.AfterInsertHook:
		certificateAfterInsertHooks = append(certificateAfterInsertHooks, certificateHook)
	case boil.BeforeUpdateHook:
		certificateBeforeUpdateHooks = append(certificateBeforeUpdateHooks, certificateHook)
	case boil.AfterUpdateHook:
		certificateAfterUpdateHooks = append(certificateAfterUpdateHooks, certificateHook)
	case boil.BeforeDeleteHook:
		certificateBeforeDeleteHooks = append(certificateBeforeDeleteHooks, certificateHook)
	case boil.AfterDeleteHook:
		certificateAfterDeleteHooks = append(certificateAfterDeleteHooks, certificateHook)
	case boil.BeforeUpsertHook:
		certificateBeforeUpsertHooks = append(certificateBeforeUpsertHooks, certificateHook)
	case boil.AfterUpsertHook:
		certificateAfterUpsertHooks = append(certificateAfterUpsertHooks, certificateHook)
	}
}

// One returns a single certificate record from the query.
func (q certificateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Certificate, error) {
	o := &Certificate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for certificate")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Certificate records from the query.
func (q certificateQuery) All(ctx context.Context, exec boil.ContextExecutor) (CertificateSlice, error) {
	var o []*Certificate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Certificate slice")
	}

	if len(certificateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Certificate records in the query.
func (q certificateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count certificate rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q certificateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if certificate exists")
	}

	return count > 0, nil
}

// LinkedCourse pointed to by the foreign key.
func (o *Certificate) LinkedCourse(mods ...qm.QueryMod) courseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.LinkedCourseID),
	}

	queryMods = append(queryMods, mods...)

	return Courses(queryMods...)
}

// Exam pointed to by the foreign key.
func (o *Certificate) Exam(mods ...qm.QueryMod) examQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ExamID),
	}

	queryMods = append(queryMods, mods...)

	return Exams(queryMods...)
}

// User pointed to by the foreign key.
func (o *Certificate) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Courses retrieves all the course's Courses with an executor.
func (o *Certificate) Courses(mods ...qm.QueryMod) courseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("`course_requires_certificate` on `course`.`id` = `course_requires_certificate`.`course_id`"),
		qm.Where("`course_requires_certificate`.`certificate_id`=?", o.ID),
	)

	return Courses(queryMods...)
}

// LoadLinkedCourse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (certificateL) LoadLinkedCourse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCertificate interface{}, mods queries.Applicator) error {
	var slice []*Certificate
	var object *Certificate

	if singular {
		object = maybeCertificate.(*Certificate)
	} else {
		slice = *maybeCertificate.(*[]*Certificate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &certificateR{}
		}
		args = append(args, object.LinkedCourseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &certificateR{}
			}

			for _, a := range args {
				if a == obj.LinkedCourseID {
					continue Outer
				}
			}

			args = append(args, obj.LinkedCourseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`course`),
		qm.WhereIn(`course.id in ?`, args...),
		qmhelper.WhereIsNull(`course.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Course")
	}

	var resultSlice []*Course
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for course")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course")
	}

	if len(certificateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LinkedCourse = foreign
		if foreign.R == nil {
			foreign.R = &courseR{}
		}
		foreign.R.LinkedCourseCertificates = append(foreign.R.LinkedCourseCertificates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LinkedCourseID == foreign.ID {
				local.R.LinkedCourse = foreign
				if foreign.R == nil {
					foreign.R = &courseR{}
				}
				foreign.R.LinkedCourseCertificates = append(foreign.R.LinkedCourseCertificates, local)
				break
			}
		}
	}

	return nil
}

// LoadExam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (certificateL) LoadExam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCertificate interface{}, mods queries.Applicator) error {
	var slice []*Certificate
	var object *Certificate

	if singular {
		object = maybeCertificate.(*Certificate)
	} else {
		slice = *maybeCertificate.(*[]*Certificate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &certificateR{}
		}
		if !queries.IsNil(object.ExamID) {
			args = append(args, object.ExamID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &certificateR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ExamID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ExamID) {
				args = append(args, obj.ExamID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`exam`),
		qm.WhereIn(`exam.id in ?`, args...),
		qmhelper.WhereIsNull(`exam.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Exam")
	}

	var resultSlice []*Exam
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Exam")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exam")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exam")
	}

	if len(certificateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Exam = foreign
		if foreign.R == nil {
			foreign.R = &examR{}
		}
		foreign.R.Certificates = append(foreign.R.Certificates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ExamID, foreign.ID) {
				local.R.Exam = foreign
				if foreign.R == nil {
					foreign.R = &examR{}
				}
				foreign.R.Certificates = append(foreign.R.Certificates, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (certificateL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCertificate interface{}, mods queries.Applicator) error {
	var slice []*Certificate
	var object *Certificate

	if singular {
		object = maybeCertificate.(*Certificate)
	} else {
		slice = *maybeCertificate.(*[]*Certificate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &certificateR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &certificateR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
		qmhelper.WhereIsNull(`user.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(certificateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Certificates = append(foreign.R.Certificates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Certificates = append(foreign.R.Certificates, local)
				break
			}
		}
	}

	return nil
}

// LoadCourses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (certificateL) LoadCourses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCertificate interface{}, mods queries.Applicator) error {
	var slice []*Certificate
	var object *Certificate

	if singular {
		object = maybeCertificate.(*Certificate)
	} else {
		slice = *maybeCertificate.(*[]*Certificate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &certificateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &certificateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("`course`.`id`, `course`.`name`, `course`.`description`, `course`.`enroll_key`, `course`.`forum_id`, `course`.`created_at`, `course`.`updated_at`, `course`.`deleted_at`, `a`.`certificate_id`"),
		qm.From("`course`"),
		qm.InnerJoin("`course_requires_certificate` as `a` on `course`.`id` = `a`.`course_id`"),
		qm.WhereIn("`a`.`certificate_id` in ?", args...),
		qmhelper.WhereIsNull("`course`.`deleted_at`"),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load course")
	}

	var resultSlice []*Course

	var localJoinCols []string
	for results.Next() {
		one := new(Course)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Name, &one.Description, &one.EnrollKey, &one.ForumID, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for course")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice course")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on course")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course")
	}

	if len(courseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Courses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &courseR{}
			}
			foreign.R.Certificates = append(foreign.R.Certificates, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Courses = append(local.R.Courses, foreign)
				if foreign.R == nil {
					foreign.R = &courseR{}
				}
				foreign.R.Certificates = append(foreign.R.Certificates, local)
				break
			}
		}
	}

	return nil
}

// SetLinkedCourse of the certificate to the related item.
// Sets o.R.LinkedCourse to related.
// Adds o to related.R.LinkedCourseCertificates.
func (o *Certificate) SetLinkedCourse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Course) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `certificate` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"linked_course_id"}),
		strmangle.WhereClause("`", "`", 0, certificatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LinkedCourseID = related.ID
	if o.R == nil {
		o.R = &certificateR{
			LinkedCourse: related,
		}
	} else {
		o.R.LinkedCourse = related
	}

	if related.R == nil {
		related.R = &courseR{
			LinkedCourseCertificates: CertificateSlice{o},
		}
	} else {
		related.R.LinkedCourseCertificates = append(related.R.LinkedCourseCertificates, o)
	}

	return nil
}

// SetExam of the certificate to the related item.
// Sets o.R.Exam to related.
// Adds o to related.R.Certificates.
func (o *Certificate) SetExam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Exam) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `certificate` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"exam_id"}),
		strmangle.WhereClause("`", "`", 0, certificatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ExamID, related.ID)
	if o.R == nil {
		o.R = &certificateR{
			Exam: related,
		}
	} else {
		o.R.Exam = related
	}

	if related.R == nil {
		related.R = &examR{
			Certificates: CertificateSlice{o},
		}
	} else {
		related.R.Certificates = append(related.R.Certificates, o)
	}

	return nil
}

// RemoveExam relationship.
// Sets o.R.Exam to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Certificate) RemoveExam(ctx context.Context, exec boil.ContextExecutor, related *Exam) error {
	var err error

	queries.SetScanner(&o.ExamID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("exam_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Exam = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Certificates {
		if queries.Equal(o.ExamID, ri.ExamID) {
			continue
		}

		ln := len(related.R.Certificates)
		if ln > 1 && i < ln-1 {
			related.R.Certificates[i] = related.R.Certificates[ln-1]
		}
		related.R.Certificates = related.R.Certificates[:ln-1]
		break
	}
	return nil
}

// SetUser of the certificate to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Certificates.
func (o *Certificate) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `certificate` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, certificatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &certificateR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Certificates: CertificateSlice{o},
		}
	} else {
		related.R.Certificates = append(related.R.Certificates, o)
	}

	return nil
}

// AddCourses adds the given related objects to the existing relationships
// of the certificate, optionally inserting them as new records.
// Appends related to o.R.Courses.
// Sets related.R.Certificates appropriately.
func (o *Certificate) AddCourses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Course) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into `course_requires_certificate` (`certificate_id`, `course_id`) values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &certificateR{
			Courses: related,
		}
	} else {
		o.R.Courses = append(o.R.Courses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &courseR{
				Certificates: CertificateSlice{o},
			}
		} else {
			rel.R.Certificates = append(rel.R.Certificates, o)
		}
	}
	return nil
}

// SetCourses removes all previously related items of the
// certificate replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Certificates's Courses accordingly.
// Replaces o.R.Courses with related.
// Sets related.R.Certificates's Courses accordingly.
func (o *Certificate) SetCourses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Course) error {
	query := "delete from `course_requires_certificate` where `certificate_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCoursesFromCertificatesSlice(o, related)
	if o.R != nil {
		o.R.Courses = nil
	}

	return o.AddCourses(ctx, exec, insert, related...)
}

// RemoveCourses relationships from objects passed in.
// Removes related items from R.Courses (uses pointer comparison, removal does not keep order)
// Sets related.R.Certificates.
func (o *Certificate) RemoveCourses(ctx context.Context, exec boil.ContextExecutor, related ...*Course) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from `course_requires_certificate` where `certificate_id` = ? and `course_id` in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCoursesFromCertificatesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Courses {
			if rel != ri {
				continue
			}

			ln := len(o.R.Courses)
			if ln > 1 && i < ln-1 {
				o.R.Courses[i] = o.R.Courses[ln-1]
			}
			o.R.Courses = o.R.Courses[:ln-1]
			break
		}
	}

	return nil
}

func removeCoursesFromCertificatesSlice(o *Certificate, related []*Course) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Certificates {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Certificates)
			if ln > 1 && i < ln-1 {
				rel.R.Certificates[i] = rel.R.Certificates[ln-1]
			}
			rel.R.Certificates = rel.R.Certificates[:ln-1]
			break
		}
	}
}

// Certificates retrieves all the records using an executor.
func Certificates(mods ...qm.QueryMod) certificateQuery {
	mods = append(mods, qm.From("`certificate`"), qmhelper.WhereIsNull("`certificate`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`certificate`.*"})
	}

	return certificateQuery{q}
}

// FindCertificate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCertificate(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Certificate, error) {
	certificateObj := &Certificate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `certificate` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, certificateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from certificate")
	}

	if err = certificateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return certificateObj, err
	}

	return certificateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Certificate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no certificate provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(certificateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	certificateInsertCacheMut.RLock()
	cache, cached := certificateInsertCache[key]
	certificateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			certificateAllColumns,
			certificateColumnsWithDefault,
			certificateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(certificateType, certificateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(certificateType, certificateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `certificate` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `certificate` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `certificate` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, certificatePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into certificate")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for certificate")
	}

CacheNoHooks:
	if !cached {
		certificateInsertCacheMut.Lock()
		certificateInsertCache[key] = cache
		certificateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Certificate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Certificate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	certificateUpdateCacheMut.RLock()
	cache, cached := certificateUpdateCache[key]
	certificateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			certificateAllColumns,
			certificatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update certificate, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `certificate` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, certificatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(certificateType, certificateMapping, append(wl, certificatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update certificate row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for certificate")
	}

	if !cached {
		certificateUpdateCacheMut.Lock()
		certificateUpdateCache[key] = cache
		certificateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q certificateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for certificate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for certificate")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CertificateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), certificatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `certificate` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, certificatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in certificate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all certificate")
	}
	return rowsAff, nil
}

var mySQLCertificateUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Certificate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no certificate provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(certificateColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCertificateUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	certificateUpsertCacheMut.RLock()
	cache, cached := certificateUpsertCache[key]
	certificateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			certificateAllColumns,
			certificateColumnsWithDefault,
			certificateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			certificateAllColumns,
			certificatePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert certificate, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`certificate`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `certificate` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(certificateType, certificateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(certificateType, certificateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for certificate")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(certificateType, certificateMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for certificate")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for certificate")
	}

CacheNoHooks:
	if !cached {
		certificateUpsertCacheMut.Lock()
		certificateUpsertCache[key] = cache
		certificateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Certificate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Certificate) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Certificate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), certificatePrimaryKeyMapping)
		sql = "DELETE FROM `certificate` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `certificate` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(certificateType, certificateMapping, append(wl, certificatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from certificate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for certificate")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q certificateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no certificateQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from certificate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for certificate")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CertificateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(certificateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), certificatePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `certificate` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, certificatePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), certificatePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `certificate` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, certificatePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from certificate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for certificate")
	}

	if len(certificateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Certificate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCertificate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CertificateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CertificateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), certificatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `certificate`.* FROM `certificate` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, certificatePrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CertificateSlice")
	}

	*o = slice

	return nil
}

// CertificateExists checks if the Certificate row exists.
func CertificateExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `certificate` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if certificate exists")
	}

	return exists, nil
}
